@page "/PhotoValidation"
@attribute [Authorize]
@inherits PageCore<PhotoValidation>
@inject HttpClient Http

<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header">
                <div id="divMessage" class="alert alert-warning" role="alert" style="margin-bottom: 0; padding: 6px;">
                    <span id="lblMessage">Vamos ativar a câmera do seu dispositivo para validar sua foto principal</span>
                </div>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6" style="background-color: black;">
                        <video id="video" style="background-color: black; width: 100%;" autoplay muted></video>
                    </div>
                    <div class="col-md-6" style="background-color: gray;">
                        <div class="text-center">
                            @if (profile != null)
                            {
                                <img id="photo" crossorigin='anonymous' src="@profile?.GetPhotoFace()" style="width: auto; max-height: 450px;" alt="..." />
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code
{
    private ProfileVM profile { get; set; }

    protected override async Task LoadData()
    {
        //photo = await Http.ProfilePhotos_Get(LocalStorage);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        try
        {
            if (firstRender)
            {
                await JsRuntime.InvokeVoidAsync("RealDate.Face.startDetection");
                //await ProfileValidationApi.ClearCache(LocalStorage);
            }
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }
}