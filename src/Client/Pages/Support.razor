@page "/Support"
@attribute [Authorize]
@inherits PageCore<Support>
@inject HttpClient Http
@*@inject IModalService Modal*@

<Alert Color="Color.Secondary" Visible="true">
    <Link To="Terms/pt">Termos de Uso</Link> ▪ <Link To="Privacy/pt">Políticas de Privacidade</Link> ▪ <Link To="Faq">Dúvidas / Perguntas</Link>
</Alert>

<Row>
    <Column ColumnSize="ColumnSize.Is6">
        <Card>
            <CardHeader>
                <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Bug"></Icon> Erros
                <Button Size="Size.ExtraSmall" Color="Color.Primary" Float="Float.Right" Clicked="() => ShowModal(TicketType.Bug)">
                    <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.PlusCircle"></Icon> Novo
                </Button>
            </CardHeader>
            <CardBody>
                <Row>
                    <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                        <Field Horizontal="true">
                            <FieldLabel ColumnSize="ColumnSize.IsFull.OnWidescreen.Is4.OnFullHD">
                                Status
                            </FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.IsFull.OnWidescreen.Is8.OnFullHD">
                                <Select TValue="TicketStatus?" @bind-SelectedValue="@TicketStatusBug">
                                    @foreach (var item in EnumHelper.GetArray<TicketStatus>())
                                    {
                                        <SelectItem Value="@item">@item.GetName()</SelectItem>
                                    }
                                </Select>
                            </FieldBody>
                        </Field>
                    </Column>
                </Row>
                @if (OptionsBug.HasCustomVisibility)
                {
                    <CustomVisibility Options="@OptionsBug"></CustomVisibility>
                }
                else
                {
                    <div style="max-height: 350px; overflow:auto;">
                        <ul class="sortable-list connectList agile-list ui-sortable" style="padding: 0;">
                            @foreach (var item in GetTicketList(TicketType.Bug))
                            {
                                <li class="info-element ui-sortable-handle">
                                    @item.Description
                                    <div class="agile-detail">
                                        <button type="button" class="float-right btn btn-xs btn-primary" @onclick="()=>Vote(item.IdTicket)" disabled="@anyVote(item.IdTicket)">
                                            <i class="fas fa-check"></i> Votar
                                        </button>
                                        <span class="badge"><i class="fa fa-clock-o"></i> @item.DtInsert.GetElapsedTime()</span>
                                        <span class="badge"><i class="fas fa-vote-yea"></i> @item.TotalVotes</span>
                                        @if (item.TicketStatus == TicketStatus.Published)
                                        {
                                            <span class="badge badge-success">@item.TicketStatus.GetName()</span>
                                        }
                                        else if (item.TicketStatus == TicketStatus.Progress)
                                        {
                                            <span class="badge badge-warning">@item.TicketStatus.GetName()</span>
                                        }
                                        else if (item.TicketStatus == TicketStatus.Done)
                                        {
                                            <span class="badge badge-primary">@item.TicketStatus.GetName()</span>
                                        }
                                        else
                                        {
                                            <span class="badge badge-danger">@item.TicketStatus.GetName()</span>
                                        }
                                    </div>
                                </li>
                            }
                        </ul>
                    </div>
                }
            </CardBody>
        </Card>
    </Column>
    <Column ColumnSize="ColumnSize.Is6">
        <Card>
            <CardHeader>
                <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Smile"></Icon> Sugestões de Melhorias
                <Button Size="Size.ExtraSmall" Color="Color.Primary" Float="Float.Right" Clicked="() => ShowModal(TicketType.FeatureRequest)">
                    <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.PlusCircle"></Icon> Novo
                </Button>
            </CardHeader>
            <CardBody>
                <Row>
                    <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                        <Field Horizontal="true">
                            <FieldLabel ColumnSize="ColumnSize.IsFull.OnWidescreen.Is4.OnFullHD">
                                Status
                            </FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.IsFull.OnWidescreen.Is8.OnFullHD">
                                <Select TValue="TicketStatus?" @bind-SelectedValue="@TicketStatusFeature">
                                    @foreach (var item in EnumHelper.GetArray<TicketStatus>())
                                    {
                                        <SelectItem Value="@item">@item.GetName()</SelectItem>
                                    }
                                </Select>
                            </FieldBody>
                        </Field>
                    </Column>
                </Row>
                @if (OptionsFeature.HasCustomVisibility)
                {
                    <CustomVisibility Options="@OptionsFeature"></CustomVisibility>
                }
                else
                {
                    <div style="max-height: 350px; overflow:auto;">
                        <ul class="sortable-list connectList agile-list ui-sortable" style="padding: 0;">
                            @foreach (var item in GetTicketList(TicketType.FeatureRequest))
                            {
                                <li class="info-element ui-sortable-handle">
                                    @item.Description
                                    <div class="agile-detail">
                                        <button type="button" class="float-right btn btn-xs btn-primary" @onclick="()=>Vote(item.IdTicket)" disabled="@anyVote(item.IdTicket)">
                                            <i class="fas fa-check"></i> Votar
                                        </button>
                                        <span class="badge"><i class="fa fa-clock-o"></i> @item.DtInsert.GetElapsedTime()</span>
                                        <span class="badge"><i class="fas fa-vote-yea"></i> @item.TotalVotes</span>
                                        @if (item.TicketStatus == TicketStatus.Published)
                                        {
                                            <span class="badge badge-success">@item.TicketStatus.GetName()</span>
                                        }
                                        else if (item.TicketStatus == TicketStatus.Progress)
                                        {
                                            <span class="badge badge-warning">@item.TicketStatus.GetName()</span>
                                        }
                                        else if (item.TicketStatus == TicketStatus.Done)
                                        {
                                            <span class="badge badge-primary">@item.TicketStatus.GetName()</span>
                                        }
                                        else
                                        {
                                            <span class="badge badge-danger">@item.TicketStatus.GetName()</span>
                                        }
                                    </div>
                                </li>
                            }
                        </ul>
                    </div>
                }
            </CardBody>
        </Card>
    </Column>
</Row>

@code {
    private List<TicketVM> tickets;
    private List<TicketVoteVM> myVotes;

    public TicketStatus? TicketStatusBug { get; set; }
    public TicketStatus? TicketStatusFeature { get; set; }

    private VisibilityOptions OptionsBug => new VisibilityOptions()
    {
        Loading = tickets == null && myVotes == null,
        NoData = (tickets != null && !GetTicketList(TicketType.Bug).Any())
    };

    private VisibilityOptions OptionsFeature => new VisibilityOptions()
    {
        Loading = tickets == null && myVotes == null,
        NoData = (tickets != null && !GetTicketList(TicketType.FeatureRequest).Any())
    };

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Toast.ShowWarning("Olá, como ainda estamos em uma versão beta, é provável que alguns erros ocorram ou que alguns recursos precisem de melhorias.");
    }

    protected override async Task LoadData()
    {
        tickets = await Http.Ticket_GetList();
        myVotes = await Http.Ticket_GetMyVotes();
    }

    private List<TicketVM> GetTicketList(TicketType ticketType)
    {
        if (ticketType == TicketType.Bug && TicketStatusBug.HasValue)
            return tickets.Where(w => w.TicketType == ticketType & w.TicketStatus == TicketStatusBug).OrderByDescending(o => o.DtInsert).ToList();
        else if (ticketType == TicketType.FeatureRequest && TicketStatusFeature.HasValue)
            return tickets.Where(w => w.TicketType == ticketType & w.TicketStatus == TicketStatusFeature).OrderByDescending(o => o.DtInsert).ToList();
        else
            return tickets.Where(w => w.TicketType == ticketType).OrderByDescending(o => o.DtInsert).ToList();
    }

    async Task ShowModal(TicketType ticketType)
    {
        //var parameters = new ModalParameters();
        //parameters.Add(nameof(TicketType), ticketType);

        //var messageForm = Modal.Show<NewTicket>("Novo Ticket", parameters);
        //var result = await messageForm.Result;

        //if (!result.Cancelled)
        //{
        //    await Http.Ticket_Insert((TicketVM)result.Data);
        //    tickets.Add((TicketVM)result.Data);
        //}
    }

    private async Task Vote(string IdTicket)
    {
        if (anyVote(IdTicket))
        {
            Toast.ShowError("Você já votou neste ticket");
        }
        else
        {
            await Http.Ticket_Vote(IdTicket);
            tickets.Single(s => s.IdTicket == IdTicket).Vote();
            myVotes.Add(new TicketVoteVM() { IdTicket = IdTicket, IdUser = ComponenteUtils.IdUser });
            Toast.ShowSuccess("Voto registrado com sucesso");
        }
    }

    private bool anyVote(string IdTicket)
    {
        return myVotes.Any(a => a.IdTicket == IdTicket & a.IdUser == ComponenteUtils.IdUser);
    }
}