@page "/ProfileData"
@attribute [Authorize]
@inherits PageCore<ProfileData>
@inject HttpClient Http
@*@using Microsoft.AspNetCore.Components*@

@if (Options.HasCustomVisibility)
{
    <CustomVisibility Options="Options"></CustomVisibility>
}
else
{
    <EditForm Model="@profile" OnValidSubmit="HandleValidSubmit">
        <FluentValidationValidator />

        <Card>
            <CardHeader>
                Perfil
                <Button Size="Size.ExtraSmall" Color="Color.Danger" Float="Float.Right" Clicked="privacy.ShowModal" title="Termos de Privacidade">
                    <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.UserShield"></Icon>
                </Button>
            </CardHeader>
            <CardBody>
                <Divider DividerType="DividerType.TextContent" Text="Básico"></Divider>
                <Row>
                    <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                        <Field Horizontal="true">
                            <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is4.OnDesktop"><Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.User"></Icon> Nome / Apelido</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is8.OnDesktop">
                                <InputText @bind-Value="@profile.NickName" @attributes="@AttributeHelper.GetAttributes((() => profile.NickName), false, true)"></InputText>
                                <ValidationMessage For="@(() => profile.NickName)"></ValidationMessage>
                            </FieldBody>
                        </Field>
                        <div class="form-group row">
                            <CustomLabel For="@(() => profile.Description)" CssIcon="fas fa-quote-left"></CustomLabel>
                            <div class="col-sm-8">
                                <InputTextArea @bind-Value="@profile.Description" @attributes="@AttributeHelper.GetAttributes((() => profile.Description), false, true, true)"></InputTextArea>
                                <ValidationMessage For="@(()=>profile.Description)"></ValidationMessage>
                            </div>
                        </div>
                        <div class="row">
                            <CustomLabel For="@(() => profile.Location)" CssIcon="fas fa-map-marker-alt" Comment="Informação automática (deve-se liberar a opção de GPS)"></CustomLabel>
                            <div class="col-sm-8">
                                <div class="form-group">
                                    <input class="form-control" value="@profile.Location" disabled />
                                </div>
                            </div>
                        </div>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                        <div class="form-group row">
                            <CustomLabel For="@(() => profile.MaritalStatus)" CssIcon="far fa-heart"></CustomLabel>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <InputSelect TValue="MaritalStatus" @bind-Value="@profile.MaritalStatus" @attributes="@AttributeHelper.GetAttributes((() => profile.MaritalStatus))">
                                        @foreach (var item in EnumHelper.GetArray<MaritalStatus>())
                                        {
                                            <option value="@item">@item.GetName()</option>
                                        }
                                    </InputSelect>
                                    <span class="input-group-append">
                                        <button type="button" class="btn btn-outline btn-primary" @onclick="() => UpdateDataHelp(() => profile.MaritalStatus, typeof(MaritalStatus))">
                                            <i class="fas fa-question"></i>
                                        </button>
                                    </span>
                                </div>
                                <ValidationMessage For="@(()=>profile.MaritalStatus)"></ValidationMessage>
                            </div>
                        </div>
                        <div class="form-group row">
                            <CustomLabel For="@(() => profile.Intent)" CssIcon="fas fa-search" Comment="Poderá escolher mais de uma opção. O match só ocorrerá se a intenção for a mesma."></CustomLabel>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <Select TValue="Intent" Multiple="true" SelectedValues="@profile.Intent">
                                        @foreach (var item in EnumHelper.GetArray<Intent>())
                                        {
                                            <SelectItem Value="@item">@item.GetName()</SelectItem>
                                        }
                                    </Select>
                                    <span class="input-group-append">
                                        <button type="button" class="btn btn-outline btn-primary" data-toggle="modal" data-target="#modalDataHelp" @onclick="() => UpdateDataHelp(() => profile.Intent, typeof(Intent))">
                                            <i class="fas fa-question"></i>
                                        </button>
                                    </span>
                                </div>
                                <ValidationMessage For="@(()=>profile.Intent)"></ValidationMessage>
                            </div>
                            @*<div class="col-sm-4">
                                    <div class="custom-control custom-checkbox">
                                        <input type="checkbox" @bind-value="@sex" class="custom-control-input" id="chksex">
                                        <label class="custom-control-label" for="chksex">@Intent.OneNightStand.GetName()</label>
                                    </div>
                                    <div class="custom-control custom-checkbox">
                                        <input type="checkbox" @bind-value="@friend" class="custom-control-input" id="chkfriend" />
                                        <label class="custom-control-label" for="chkfriend">@Intent.FriendsWithBenefits.GetName()</label>
                                    </div>
                                </div>
                                <div class="col-sm-4">
                                    <div class="custom-control custom-checkbox">
                                        <input type="checkbox" @bind-value="@relationship" class="custom-control-input" id="chkrelationship" />
                                        <label class="custom-control-label" for="chkrelationship">@Intent.Relationship.GetName()</label>
                                    </div>
                                    <div class="custom-control custom-checkbox">
                                        <input type="checkbox" @bind-value="@marrie" class="custom-control-input" id="chkmarrie" />
                                        <label class="custom-control-label" for="chkmarrie">@Intent.Married.GetName()</label>
                                    </div>
                                </div>*@
                        </div>
                        <div class="form-group row">
                            <CustomLabel For="@(() => profile.BiologicalSex)" CssIcon="fas fa-neuter"></CustomLabel>
                            <div class="col-sm-8">
                                <InputSelect TValue="BiologicalSex" @bind-Value="@profile.BiologicalSex" @attributes="@AttributeHelper.GetAttributes((() => profile.BiologicalSex))">
                                    @foreach (var item in EnumHelper.GetArray<BiologicalSex>())
                                    {
                                        <option value="@item">@item.GetName()</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(()=>profile.BiologicalSex)"></ValidationMessage>
                            </div>
                        </div>
                        <div class="form-group row">
                            <CustomLabel For="@(() => profile.GenderIdentity)" CssIcon="fas fa-neuter" Comment="Este campo é opcional"></CustomLabel>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <InputSelect TValue="GenderIdentity" @bind-Value="@profile.GenderIdentity" @attributes="@AttributeHelper.GetAttributes((() => profile.GenderIdentity))">
                                        <optgroup label="Binário">
                                            <option value="@GenderIdentity.Cisgender">@GenderIdentity.Cisgender.GetName()</option>
                                        </optgroup>
                                        <optgroup label="Não-Binário">
                                            <option value="@GenderIdentity.Transgender">@GenderIdentity.Transgender.GetName()</option>
                                            <option value="@GenderIdentity.Transexuais">@GenderIdentity.Transexuais.GetName()</option>
                                            <option value="@GenderIdentity.Travestis">@GenderIdentity.Travestis.GetName()</option>
                                            <option value="@GenderIdentity.Intergenero">@GenderIdentity.Intergenero.GetName()</option>
                                            <option value="@GenderIdentity.Androgenos">@GenderIdentity.Androgenos.GetName()</option>
                                            <option value="@GenderIdentity.Intersexual">@GenderIdentity.Intersexual.GetName()</option>
                                            <option value="@GenderIdentity.Other">@GenderIdentity.Other.GetName()</option>
                                        </optgroup>
                                    </InputSelect>
                                    <span class="input-group-append">
                                        <button type="button" class="btn btn-outline btn-primary" data-toggle="modal" data-target="#modalDataHelp" @onclick="() => UpdateDataHelp(() => profile.GenderIdentity, typeof(GenderIdentity))">
                                            <i class="fas fa-question"></i>
                                        </button>
                                    </span>
                                </div>
                                <ValidationMessage For="@(()=>profile.GenderIdentity)"></ValidationMessage>
                            </div>
                        </div>
                        <div class="form-group row">
                            <CustomLabel For="@(() => profile.SexualOrientation)" CssIcon="fas fa-neuter" Comment="Este campo é opcional"></CustomLabel>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <InputSelect TValue="SexualOrientation" @bind-Value="@profile.SexualOrientation" @attributes="@AttributeHelper.GetAttributes((() => profile.SexualOrientation))">
                                        @foreach (var item in EnumHelper.GetArray<SexualOrientation>())
                                        {
                                            <option value="@item">@item.GetName()</option>
                                        }
                                    </InputSelect>
                                    <span class="input-group-append">
                                        <button type="button" class="btn btn-outline btn-primary" data-toggle="modal" data-target="#modalDataHelp" @onclick="() => UpdateDataHelp(() => profile.SexualOrientation, typeof(SexualOrientation))">
                                            <i class="fas fa-question"></i>
                                        </button>
                                    </span>
                                </div>
                                <ValidationMessage For="@(()=>profile.SexualOrientation)"></ValidationMessage>
                            </div>
                        </div>
                    </Column>
                </Row>
                <Divider DividerType="DividerType.TextContent" Text="Bio"></Divider>
                <Row>
                    <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                        <div class="form-group row">
                            <CustomLabel For="@(() => profile.BirthDate)" CssIcon="fas fa-birthday-cake"></CustomLabel>
                            <div class="col-sm-8">
                                <InputDate @bind-Value="@profile.BirthDate" @attributes="@AttributeHelper.GetAttributes((() => profile.BirthDate))"></InputDate>
                                <ValidationMessage For="@(()=>profile.BirthDate)"></ValidationMessage>
                            </div>
                        </div>
                        <div class="form-group row">
                            <div class="col-sm-4 offset-sm-4">
                                <input class="form-control" value="@profile.BirthDate.GetAge() Anos" disabled />
                            </div>
                            <div class="col-sm-4">
                                <input class="form-control" value="@profile.BirthDate.GetZodiac().GetName()" disabled />
                            </div>
                        </div>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                        <div class="form-group row">
                            <CustomLabel For="@(() => profile.RaceCategory)" CssIcon="fas fa-globe"></CustomLabel>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <InputSelect TValue="RaceCategory" @bind-Value="@profile.RaceCategory" @attributes="@AttributeHelper.GetAttributes((() => profile.RaceCategory))">
                                        @foreach (var item in EnumHelper.GetArray<RaceCategory>())
                                        {
                                            <option value="@item">@item.GetName()</option>
                                        }
                                    </InputSelect>
                                    <span class="input-group-append">
                                        <button type="button" class="btn btn-outline btn-primary" data-toggle="modal" data-target="#modalDataHelp" @onclick="() => UpdateDataHelp(() => profile.RaceCategory, typeof(RaceCategory))">
                                            <i class="fas fa-question"></i>
                                        </button>
                                    </span>
                                </div>
                                <ValidationMessage For="@(()=>profile.RaceCategory)"></ValidationMessage>
                            </div>
                        </div>
                        <div class="form-group row">
                            <CustomLabel For="@(() => profile.Height)" CssIcon="fas fa-ruler"></CustomLabel>
                            <div class="col-sm-8">
                                <InputSelect TValue="Height" @bind-Value="@profile.Height" @attributes="@AttributeHelper.GetAttributes((() => profile.Height))">
                                    @foreach (var item in EnumHelper.GetArray<Height>())
                                    {
                                        <option value="@item">@item.GetName()</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(()=>profile.Height)"></ValidationMessage>
                            </div>
                        </div>
                        <div class="form-group row">
                            <CustomLabel For="@(() => profile.BodyMass)" CssIcon="fas fa-weight"></CustomLabel>
                            <div class="col-sm-8">
                                <InputSelect TValue="BodyMass" @bind-Value="@profile.BodyMass" @attributes="@AttributeHelper.GetAttributes((() => profile.BodyMass))">
                                    @foreach (var item in EnumHelper.GetArray<BodyMass>())
                                    {
                                        <option value="@item">@item.GetName()</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(()=>profile.BodyMass)"></ValidationMessage>
                            </div>
                        </div>
                    </Column>
                </Row>
                <Divider DividerType="DividerType.TextContent" Text="Lifestyle"></Divider>
                <Row>
                    <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                        <div class="form-group row">
                            <CustomLabel For="@(() => profile.Drink)" CssIcon="fas fa-glass-cheers"></CustomLabel>
                            <div class="col-sm-8">
                                <InputSelect TValue="Drink" @bind-Value="@profile.Drink" @attributes="@AttributeHelper.GetAttributes((() => profile.Drink))">
                                    @foreach (var item in EnumHelper.GetArray<Drink>())
                                    {
                                        <option value="@item">@item.GetName()</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(()=>profile.Drink)"></ValidationMessage>
                            </div>
                        </div>
                        <div class="form-group row">
                            <CustomLabel For="@(() => profile.Smoke)" CssIcon="fas fa-smoking"></CustomLabel>
                            <div class="col-sm-8">
                                <InputSelect TValue="Smoke" @bind-Value="@profile.Smoke" @attributes="@AttributeHelper.GetAttributes((() => profile.Smoke))">
                                    @foreach (var item in EnumHelper.GetArray<Smoke>())
                                    {
                                        <option value="@item">@item.GetName()</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(()=>profile.Smoke)"></ValidationMessage>
                            </div>
                        </div>
                        <div class="form-group row">
                            <CustomLabel For="@(() => profile.Diet)" CssIcon="fas fa-utensils" Comment="Este campo é opcional"></CustomLabel>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <InputSelect TValue="Diet" @bind-Value="@profile.Diet" @attributes="@AttributeHelper.GetAttributes((() => profile.Diet), disabled: IsShortTerm)">
                                        @foreach (var item in EnumHelper.GetArray<Diet>())
                                        {
                                            <option value="@item">@item.GetName()</option>
                                        }
                                    </InputSelect>
                                    <span class="input-group-append">
                                        <button type="button" class="btn btn-outline btn-primary" data-toggle="modal" data-target="#modalDataHelp" @onclick="() => UpdateDataHelp(() => profile.Diet, typeof(Diet))">
                                            <i class="fas fa-question"></i>
                                        </button>
                                    </span>
                                </div>
                                <ValidationMessage For="@(()=>profile.CareerCluster)"></ValidationMessage>
                            </div>
                        </div>
                        <div class="form-group row">
                            <CustomLabel For="@(() => profile.HaveChildren)" CssIcon="fas fa-child"></CustomLabel>
                            <div class="col-sm-8">
                                <InputSelect TValue="HaveChildren?" @bind-Value="@profile.HaveChildren" @attributes="@AttributeHelper.GetAttributes((() => profile.HaveChildren), disabled: IsShortTerm)">
                                    @foreach (var item in EnumHelper.GetArray<HaveChildren>())
                                    {
                                        <option value="@item">@item.GetName()</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(()=>profile.HaveChildren)"></ValidationMessage>
                            </div>
                        </div>
                        <div class="form-group row">
                            <CustomLabel For="@(() => profile.WantChildren)" CssIcon="fas fa-baby"></CustomLabel>
                            <div class="col-sm-8">
                                <InputSelect TValue="WantChildren?" @bind-Value="@profile.WantChildren" @attributes="@AttributeHelper.GetAttributes((() => profile.WantChildren), disabled: IsShortTerm)">
                                    @foreach (var item in EnumHelper.GetArray<WantChildren>())
                                    {
                                        <option value="@item">@item.GetName()</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(()=>profile.WantChildren)"></ValidationMessage>
                            </div>
                        </div>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                        <div class="form-group row">
                            <CustomLabel For="@(() => profile.EducationLevel)" CssIcon="fas fa-graduation-cap"></CustomLabel>
                            <div class="col-sm-8">
                                <InputSelect TValue="EducationLevel?" @bind-Value="@profile.EducationLevel" @attributes="@AttributeHelper.GetAttributes((() => profile.EducationLevel), disabled: IsShortTerm)">
                                    @foreach (var item in EnumHelper.GetArray<EducationLevel>())
                                    {
                                        <option value="@item">@item.GetName()</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(()=>profile.EducationLevel)"></ValidationMessage>
                            </div>
                        </div>
                        <div class="form-group row">
                            <CustomLabel For="@(() => profile.CareerCluster)" CssIcon="fas fa-briefcase"></CustomLabel>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <InputSelect TValue="CareerCluster?" @bind-Value="@profile.CareerCluster" @attributes="@AttributeHelper.GetAttributes((() => profile.CareerCluster), disabled: IsShortTerm)">
                                        @foreach (var item in EnumHelper.GetArray<CareerCluster>())
                                        {
                                            <option value="@item">@item.GetName()</option>
                                        }
                                    </InputSelect>
                                    <span class="input-group-append">
                                        <button type="button" class="btn btn-outline btn-primary" data-toggle="modal" data-target="#modalDataHelp" @onclick="() => UpdateDataHelp(() => profile.CareerCluster, typeof(CareerCluster))">
                                            <i class="fas fa-question"></i>
                                        </button>
                                    </span>
                                </div>
                                <ValidationMessage For="@(()=>profile.CareerCluster)"></ValidationMessage>
                            </div>
                        </div>
                        <div class="form-group row">
                            <CustomLabel For="@(() => profile.Religion)" CssIcon="fas fa-praying-hands"></CustomLabel>
                            <div class="col-sm-8">
                                <InputSelect TValue="Religion?" @bind-Value="@profile.Religion" @attributes="@AttributeHelper.GetAttributes((() => profile.Religion), disabled: IsShortTerm)">
                                    @foreach (var item in EnumHelper.GetArray<Religion>())
                                    {
                                        <option value="@item">@item.GetName()</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(()=>profile.Religion)"></ValidationMessage>
                            </div>
                        </div>
                        <div class="form-group row">
                            <CustomLabel For="@(() => profile.MoneyPersonality)" CssIcon="fas fa-wallet"></CustomLabel>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <InputSelect TValue="MoneyPersonality?" @bind-Value="@profile.MoneyPersonality" @attributes="@AttributeHelper.GetAttributes((() => profile.MoneyPersonality), disabled: IsShortTerm)">
                                        @foreach (var item in EnumHelper.GetArray<MoneyPersonality>())
                                        {
                                            <option value="@item">@item.GetName()</option>
                                        }
                                    </InputSelect>
                                    <span class="input-group-append">
                                        <button type="button" class="btn btn-outline btn-primary" data-toggle="modal" data-target="#modalDataHelp" @onclick="() => UpdateDataHelp(() => profile.MoneyPersonality, typeof(MoneyPersonality))">
                                            <i class="fas fa-question"></i>
                                        </button>
                                    </span>
                                </div>
                                <ValidationMessage For="@(()=>profile.MoneyPersonality)"></ValidationMessage>
                            </div>
                        </div>
                        <div class="form-group row">
                            <CustomLabel For="@(() => profile.MyersBriggsTypeIndicator)" CssIcon="fas fa-user"></CustomLabel>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <InputSelect TValue="MyersBriggsTypeIndicator?" @bind-Value="@profile.MyersBriggsTypeIndicator" @attributes="@AttributeHelper.GetAttributes((() => profile.MyersBriggsTypeIndicator), disabled: IsShortTerm)">
                                        @foreach (var item in EnumHelper.GetArray<MyersBriggsTypeIndicator>())
                                        {
                                            <option value="@item">@item.GetName()</option>
                                        }
                                    </InputSelect>
                                    <span class="input-group-append">
                                        <button type="button" class="btn btn-outline btn-primary" data-toggle="modal" data-target="#modalDataHelp" @onclick="() => UpdateDataHelp(() => profile.MyersBriggsTypeIndicator, typeof(MyersBriggsTypeIndicator))">
                                            <i class="fas fa-question"></i>
                                        </button>
                                    </span>
                                </div>
                                <ValidationMessage For="@(()=>profile.MyersBriggsTypeIndicator)"></ValidationMessage>
                            </div>
                        </div>
                        <div class="form-group row">
                            <CustomLabel For="@(() => profile.RelationshipPersonality)" CssIcon="fas fa-people-arrows"></CustomLabel>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <InputSelect TValue="RelationshipPersonality?" @bind-Value="@profile.RelationshipPersonality" @attributes="@AttributeHelper.GetAttributes((() => profile.RelationshipPersonality), disabled: IsShortTerm)">
                                        @foreach (var item in EnumHelper.GetArray<RelationshipPersonality>())
                                        {
                                            <option value="@item">@item.GetName()</option>
                                        }
                                    </InputSelect>
                                    <span class="input-group-append">
                                        <button type="button" class="btn btn-outline btn-primary" data-toggle="modal" data-target="#modalDataHelp" @onclick="() => UpdateDataHelp(() => profile.RelationshipPersonality, typeof(RelationshipPersonality))">
                                            <i class="fas fa-question"></i>
                                        </button>
                                    </span>
                                </div>
                                <ValidationMessage For="@(()=>profile.RelationshipPersonality)"></ValidationMessage>
                            </div>
                        </div>
                    </Column>
                </Row>
            </CardBody>
            <CardFooter>
                <Button Type="ButtonType.Submit" Color="Color.Primary">
                    <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Save"></Icon> Salvar Dados
                </Button>
                @if (!string.IsNullOrEmpty(profile?.Id))
                {
                    <Badge Color="Color.Danger">
                        <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Crown"></Icon> -100 XP
                    </Badge>
                }
            </CardFooter>
        </Card>
    </EditForm>
    <ProfileDataHelp @ref="dataHelp"></ProfileDataHelp>
    <BasicModal @ref="privacy" Title="Termos de privacidade">
        <ul>
            <li>Pedimos que leia nosso '<a href="/Terms/pt" target="_blank">Termos de Uso</a>' para ficar ciente de como seus dados serão tratados;</li>
            <li>Seja honesto nas respostas dadas neste formulário. Todas as informações aqui contidas estão abertas a denúncias e poderão ser avaliadas;</li>
        </ul>
    </BasicModal>
}

@code {

    private ProfileVM profile;
    private GeoLocation GPS;
    protected bool IsShortTerm { get { return profile.Intent.IsShortTerm(); } }
    private BasicModal privacy;
    private ProfileDataHelp dataHelp;

    private VisibilityOptions Options => new VisibilityOptions()
    {
        Loading = profile == null,
    };

    protected override async Task LoadData()
    {
        profile = await Http.Profile_Get(LocalStorage);

        if (profile == null)
        {
            profile = new ProfileVM();

            profile.LoadDefatultData();

            if (profile != null && !profile.Longitude.HasValue)
            {
                //GPS = await JsRuntime.InvokeAsync<GeoLocation>("RealDate.GPS.getCurrentPosition");
                var fake = VerusDate.Shared.Seed.ProfileSeed.GetProfileVM();
                GPS = new GeoLocation() { Latitude = fake.Latitude.Value, Longitude = fake.Longitude.Value, Accuracy = 20 };

                //TODO: chamar código da api
                var here = await Http.Map_GetLocation(GPS.Latitude, GPS.Longitude);
                if (here.items.Any())
                {
                    var address = here.items[0].address;
                    profile.Location = address.GetLocation();
                }
                else
                {
                    profile.Location = "Localização Desconhecida";
                }

                if (GPS?.Latitude == 0 && GPS?.Longitude == 0 && GPS.Accuracy == 0)
                {
                    Toast.ShowWarning($"Não foi possível detectar um sistema GPS no seu dispositivo. Favor, tentar novamente ou liberar acesso ao GPS do seu dispositivo.", "alerta");
                }
                else
                {
                    profile.Longitude = GPS.Longitude;
                    profile.Latitude = GPS.Latitude;

                    if (GPS.Accuracy > 500)
                    {
                        Toast.ShowWarning($"A posição do GPS foi recuperada, mas a precisão é de apenas: {Math.Round(GPS.Accuracy / 1000, 1)} km. Tente novamente mais tarde ou use um dispositivo mais preciso.", "alerta");
                    }
                }
            }
        }
    }

    protected void UpdateDataHelp(System.Linq.Expressions.Expression<Func<object>> For, System.Type TypeEnum)
    {
        dataHelp.ChangeContent(For, TypeEnum);
        dataHelp.ShowModal();
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            HttpResponseMessage response;

            profile.ClearSimpleView();

            if (string.IsNullOrEmpty(profile?.Id))
            {
                response = await Http.Profile_Add(LocalStorage, profile, ComponenteUtils.IdUser);
                Toast.ShowWarning("+30 XP");
            }
            else
            {
                response = await Http.Profile_Update(LocalStorage, profile);
                Toast.ShowWarning("-100 XP");
            }

            await response.ProcessResponse(Toast, "Salvo com sucesso!");
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }
}