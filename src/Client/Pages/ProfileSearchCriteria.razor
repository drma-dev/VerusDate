@page "/ProfileSearchCriteria"
@attribute [Authorize]
@inherits PageCore<ProfileSearchCriteria>
@inject HttpClient Http

@if (Options.HasCustomVisibility)
{
    <CustomVisibility Options="Options"></CustomVisibility>
}
else
{
    <EditForm Model="@looking" OnValidSubmit="HandleValidSubmit">
        <FluentValidationValidator />

        <div class="ibox ">
            <div class="ibox-title">
                <h5>Critérios de Busca</h5>
                <small>Aqui você pode definir seu tipo ideal de perfil, para incrementar nossas sugestões e também para calcular o percentual de afinidades</small>
                <div class="ibox-tools">
                    <a class="btn btn-primary btn-xs" @onclick="PopulateFields"><i class="fas fa-magic"></i> Preencher</a>
                </div>
            </div>
            <div class="ibox-content">

                <h3>Básico</h3>
                <div class="hr-line-dashed"></div>

                <div class="row">
                    <div class="col-sm-6">
                        <div class="form-group row">
                            <CustomLabel For="@(() => looking.Distance)" CssIcon="fas fa-map-marker-alt" Comment="Campo obrigatório"></CustomLabel>
                            <div class="col-sm-8">
                                <InputNumber @bind-Value="@looking.Distance" @attributes="@AttributeHelper.GetAttributes((() => looking.Distance))"></InputNumber>
                                <ValidationMessage For="@(()=>looking.Distance)"></ValidationMessage>
                            </div>
                        </div>
                        <div class="form-group row">
                            <CustomLabel For="@(() => looking.MaritalStatus)" CssIcon="far fa-heart"></CustomLabel>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <InputSelect TValue="MaritalStatus?" @bind-Value="@looking.MaritalStatus" @attributes="@AttributeHelper.GetAttributes((() => looking.MaritalStatus))">
                                        <option></option>
                                        @foreach (var item in EnumHelper.GetArray<MaritalStatus>())
                                        {
                                            <option value="@item">@item.GetName()</option>
                                        }
                                    </InputSelect>
                                    <span class="input-group-append">
                                        <button type="button" class="btn btn-outline btn-primary" data-toggle="modal" data-target="#modalDataHelp" @onclick="() => UpdateDataHelp(() => looking.MaritalStatus, typeof(MaritalStatus))">
                                            <i class="fas fa-question"></i>
                                        </button>
                                    </span>
                                </div>
                                <ValidationMessage For="@(()=>looking.MaritalStatus)"></ValidationMessage>
                            </div>
                        </div>
                        <div class="form-group row">
                            <CustomLabel For="@(() => looking.Intent)" CssIcon="fas fa-search" Comment="Campo obrigatório"></CustomLabel>
                            <div class="col-sm-8">
                                <div class="input-group">                                    
                                    <select multiple @bind="@profile.Intent" class="form-control">
                                        @foreach (var item in EnumHelper.GetArray<Intent>())
                                        {
                                            <option value="@item">@item.GetName()</option>
                                        }
                                    </select>
                                    <span class="input-group-append">
                                        <button type="button" class="btn btn-outline btn-primary" data-toggle="modal" data-target="#modalDataHelp" @onclick="() => UpdateDataHelp(() => looking.Intent, typeof(Intent))">
                                            <i class="fas fa-question"></i>
                                        </button>
                                    </span>
                                </div>
                                <ValidationMessage For="@(()=>looking.Intent)"></ValidationMessage>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group row">
                            <CustomLabel For="@(() => looking.BiologicalSex)" CssIcon="fas fa-neuter"></CustomLabel>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <InputSelect TValue="BiologicalSex?" @bind-Value="@looking.BiologicalSex" @attributes="@AttributeHelper.GetAttributes((() => looking.BiologicalSex))">
                                        <option></option>
                                        @foreach (var item in EnumHelper.GetArray<BiologicalSex>())
                                        {
                                            <option value="@item">@item.GetName()</option>
                                        }
                                    </InputSelect>
                                    <span class="input-group-append">
                                        <button type="button" class="btn btn-outline btn-primary" data-toggle="modal" data-target="#modalDataHelp" @onclick="() => UpdateDataHelp(() => looking.BiologicalSex, typeof(BiologicalSex))">
                                            <i class="fas fa-question"></i>
                                        </button>
                                    </span>
                                </div>
                                <ValidationMessage For="@(()=>looking.BiologicalSex)"></ValidationMessage>
                            </div>
                        </div>
                        <div class="form-group row">
                            <CustomLabel For="@(() => looking.GenderIdentity)" CssIcon="fas fa-neuter"></CustomLabel>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <InputSelect TValue="GenderIdentity?" @bind-Value="@looking.GenderIdentity" @attributes="@AttributeHelper.GetAttributes((() => looking.GenderIdentity))">
                                        <option></option>
                                        <optgroup label="Binário">
                                            <option value="@GenderIdentity.Cisgender">@GenderIdentity.Cisgender.GetName()</option>
                                        </optgroup>
                                        <optgroup label="Não-Binário">
                                            <option value="@GenderIdentity.Transgender">@GenderIdentity.Transgender.GetName()</option>
                                            <option value="@GenderIdentity.Transexuais">@GenderIdentity.Transexuais.GetName()</option>
                                            <option value="@GenderIdentity.Travestis">@GenderIdentity.Travestis.GetName()</option>
                                            <option value="@GenderIdentity.Intergenero">@GenderIdentity.Intergenero.GetName()</option>
                                            <option value="@GenderIdentity.Androgenos">@GenderIdentity.Androgenos.GetName()</option>
                                            <option value="@GenderIdentity.Intersexual">@GenderIdentity.Intersexual.GetName()</option>
                                            <option value="@GenderIdentity.Other">@GenderIdentity.Other.GetName()</option>
                                        </optgroup>
                                    </InputSelect>
                                    <span class="input-group-append">
                                        <button type="button" class="btn btn-outline btn-primary" data-toggle="modal" data-target="#modalDataHelp" @onclick="() => UpdateDataHelp(() => looking.GenderIdentity, typeof(GenderIdentity))">
                                            <i class="fas fa-question"></i>
                                        </button>
                                    </span>
                                </div>
                                <ValidationMessage For="@(()=>looking.GenderIdentity)"></ValidationMessage>
                            </div>
                        </div>
                        <div class="form-group row">
                            <CustomLabel For="@(() => looking.SexualOrientation)" CssIcon="fas fa-neuter"></CustomLabel>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <InputSelect TValue="SexualOrientation?" @bind-Value="@looking.SexualOrientation" @attributes="@AttributeHelper.GetAttributes((() => looking.SexualOrientation))">
                                        <option></option>
                                        @foreach (var item in EnumHelper.GetArray<SexualOrientation>())
                                        {
                                            <option value="@item">@item.GetName()</option>
                                        }
                                    </InputSelect>
                                    <span class="input-group-append">
                                        <button type="button" class="btn btn-outline btn-primary" data-toggle="modal" data-target="#modalDataHelp" @onclick="() => UpdateDataHelp(() => looking.SexualOrientation, typeof(SexualOrientation))">
                                            <i class="fas fa-question"></i>
                                        </button>
                                    </span>
                                </div>
                                <ValidationMessage For="@(()=>looking.SexualOrientation)"></ValidationMessage>
                            </div>
                        </div>
                    </div>
                </div>

                <h3>Bio</h3>
                <div class="hr-line-dashed"></div>

                <div class="row">
                    <div class="col-sm-6">
                        <div class="form-group row">
                            <CustomLabel For="@(() => looking.MinimalAge)" CssIcon="fas fa-birthday-cake" Comment="Campo obrigatório"></CustomLabel>
                            <div class="col-sm-4">
                                <InputNumber @bind-Value="@looking.MinimalAge" @attributes="@AttributeHelper.GetAttributes((() => looking.MinimalAge))"></InputNumber>
                                <ValidationMessage For="@(()=>looking.MinimalAge)"></ValidationMessage>
                            </div>
                            <div class="col-sm-4">
                                <InputNumber @bind-Value="@looking.MaxAge" @attributes="@AttributeHelper.GetAttributes((() => looking.MaxAge))"></InputNumber>
                                <ValidationMessage For="@(()=>looking.MaxAge)"></ValidationMessage>
                            </div>
                        </div>
                        <div class="form-group row">
                            <CustomLabel For="@(() => looking.MinimalHeight)" CssIcon="fas fa-ruler"></CustomLabel>
                            <div class="col-sm-4">
                                <InputSelect TValue="Height?" @bind-Value="@looking.MinimalHeight" @attributes="@AttributeHelper.GetAttributes((() => looking.MinimalHeight))">
                                    <option></option>
                                    @foreach (var item in EnumHelper.GetArray<Height>())
                                    {
                                        <option value="@item">@item.GetName()</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(()=>looking.MinimalHeight)"></ValidationMessage>
                            </div>
                            <div class="col-sm-4">
                                <InputSelect TValue="Height?" @bind-Value="@looking.MaxHeight" @attributes="@AttributeHelper.GetAttributes((() => looking.MaxHeight))">
                                    <option></option>
                                    @foreach (var item in EnumHelper.GetArray<Height>())
                                    {
                                        <option value="@item">@item.GetName()</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(()=>looking.MaxHeight)"></ValidationMessage>
                            </div>
                        </div>                        
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group row">
                            <CustomLabel For="@(() => looking.RaceCategory)" CssIcon="fas fa-globe"></CustomLabel>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <InputSelect TValue="RaceCategory?" @bind-Value="@looking.RaceCategory" @attributes="@AttributeHelper.GetAttributes((() => looking.RaceCategory))">
                                        <option></option>
                                        @foreach (var item in EnumHelper.GetArray<RaceCategory>())
                                        {
                                            <option value="@item">@item.GetName()</option>
                                        }
                                    </InputSelect>
                                    <span class="input-group-append">
                                        <button type="button" class="btn btn-outline btn-primary" data-toggle="modal" data-target="#modalDataHelp" @onclick="() => UpdateDataHelp(() => looking.RaceCategory, typeof(RaceCategory))">
                                            <i class="fas fa-question"></i>
                                        </button>
                                    </span>
                                </div>
                                <ValidationMessage For="@(()=>looking.RaceCategory)"></ValidationMessage>
                            </div>
                        </div>
                        <div class="form-group row">
                            <CustomLabel For="@(() => looking.BodyMass)" CssIcon="fas fa-weight"></CustomLabel>
                            <div class="col-sm-8">
                                <InputSelect TValue="BodyMass?" @bind-Value="@looking.BodyMass" @attributes="@AttributeHelper.GetAttributes((() => looking.BodyMass))">
                                    <option></option>
                                    @foreach (var item in EnumHelper.GetArray<BodyMass>())
                                    {
                                        <option value="@item">@item.GetName()</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(()=>looking.BodyMass)"></ValidationMessage>
                            </div>
                        </div>
                    </div>
                </div>

                <h3>Lifestyle</h3>
                <div class="hr-line-dashed"></div>

                <div class="row">
                    <div class="col-sm-6">
                        <div class="form-group row">
                            <CustomLabel For="@(() => looking.Drink)" CssIcon="fas fa-glass-cheers"></CustomLabel>
                            <div class="col-sm-8">
                                <InputSelect TValue="Drink?" @bind-Value="@looking.Drink" @attributes="@AttributeHelper.GetAttributes((() => looking.Drink))">
                                    <option></option>
                                    @foreach (var item in EnumHelper.GetArray<Drink>())
                                    {
                                        <option value="@item">@item.GetName()</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(()=>looking.Drink)"></ValidationMessage>
                            </div>
                        </div>
                        <div class="form-group row">
                            <CustomLabel For="@(() => looking.Smoke)" CssIcon="fas fa-smoking"></CustomLabel>
                            <div class="col-sm-8">
                                <InputSelect TValue="Smoke?" @bind-Value="@looking.Smoke" @attributes="@AttributeHelper.GetAttributes((() => looking.Smoke))">
                                    <option></option>
                                    @foreach (var item in EnumHelper.GetArray<Smoke>())
                                    {
                                        <option value="@item">@item.GetName()</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(()=>looking.Smoke)"></ValidationMessage>
                            </div>
                        </div>
                        <div class="form-group row">
                            <CustomLabel For="@(() => looking.Diet)" CssIcon="fas fa-briefcase"></CustomLabel>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <InputSelect TValue="Diet?" @bind-Value="@looking.Diet" @attributes="@AttributeHelper.GetAttributes((() => looking.Diet))">
                                        <option></option>
                                        @foreach (var item in EnumHelper.GetArray<Diet>())
                                        {
                                            <option value="@item">@item.GetName()</option>
                                        }
                                    </InputSelect>
                                    <span class="input-group-append">
                                        <button type="button" class="btn btn-outline btn-primary" data-toggle="modal" data-target="#modalDataHelp" @onclick="() => UpdateDataHelp(() => looking.Diet, typeof(Diet))">
                                            <i class="fas fa-question"></i>
                                        </button>
                                    </span>
                                </div>
                                <ValidationMessage For="@(()=>looking.Diet)"></ValidationMessage>
                            </div>
                        </div>
                        <div class="form-group row">
                            <CustomLabel For="@(() => looking.HaveChildren)" CssIcon="fas fa-child"></CustomLabel>
                            <div class="col-sm-8">
                                <InputSelect TValue="HaveChildren?" @bind-Value="@looking.HaveChildren" @attributes="@AttributeHelper.GetAttributes((() => looking.HaveChildren))">
                                    <option></option>
                                    @foreach (var item in EnumHelper.GetArray<HaveChildren>())
                                    {
                                        <option value="@item">@item.GetName()</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(()=>looking.HaveChildren)"></ValidationMessage>
                            </div>
                        </div>
                        <div class="form-group row">
                            <CustomLabel For="@(() => looking.WantChildren)" CssIcon="fas fa-baby"></CustomLabel>
                            <div class="col-sm-8">
                                <InputSelect TValue="WantChildren?" @bind-Value="@looking.WantChildren" @attributes="@AttributeHelper.GetAttributes((() => looking.WantChildren))">
                                    <option></option>
                                    @foreach (var item in EnumHelper.GetArray<WantChildren>())
                                    {
                                        <option value="@item">@item.GetName()</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(()=>looking.WantChildren)"></ValidationMessage>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group row">
                            <CustomLabel For="@(() => looking.EducationLevel)" CssIcon="fas fa-graduation-cap"></CustomLabel>
                            <div class="col-sm-8">
                                <InputSelect TValue="EducationLevel?" @bind-Value="@looking.EducationLevel" @attributes="@AttributeHelper.GetAttributes((() => looking.EducationLevel))">
                                    <option></option>
                                    @foreach (var item in EnumHelper.GetArray<EducationLevel>())
                                    {
                                        <option value="@item">@item.GetName()</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(()=>looking.EducationLevel)"></ValidationMessage>
                            </div>
                        </div>                        
                        <div class="form-group row">
                            <CustomLabel For="@(() => looking.Religion)" CssIcon="fas fa-praying-hands"></CustomLabel>
                            <div class="col-sm-8">
                                <InputSelect TValue="Religion?" @bind-Value="@looking.Religion" @attributes="@AttributeHelper.GetAttributes((() => looking.Religion))">
                                    <option></option>
                                    @foreach (var item in EnumHelper.GetArray<Religion>())
                                    {
                                        <option value="@item">@item.GetName()</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(()=>looking.Religion)"></ValidationMessage>
                            </div>
                        </div>
                        @*<div class="form-group row">
                            <CustomLabel For="@(() => looking.MoneyPersonality)" CssIcon="fas fa-wallet"></CustomLabel>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <InputSelect TValue="MoneyPersonality?" @bind-Value="@looking.MoneyPersonality" @attributes="@AttributeHelper.GetAttributes((() => looking.MoneyPersonality))">
                                        <option></option>
                                        @foreach (var item in EnumHelper.GetArray<MoneyPersonality>())
                                        {
                                            <option value="@item">@item.GetName()</option>
                                        }
                                    </InputSelect>
                                    <span class="input-group-append">
                                        <button type="button" class="btn btn-outline btn-primary" data-toggle="modal" data-target="#modalDataHelp" @onclick="() => UpdateDataHelp(() => looking.MoneyPersonality, typeof(MoneyPersonality))">
                                            <i class="fas fa-question"></i>
                                        </button>
                                    </span>
                                </div>
                                <ValidationMessage For="@(()=>looking.MoneyPersonality)"></ValidationMessage>
                            </div>
                        </div>
                        <div class="form-group row">
                            <CustomLabel For="@(() => looking.MyersBriggsTypeIndicator)" CssIcon="fas fa-user"></CustomLabel>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <InputSelect TValue="MyersBriggsTypeIndicator?" @bind-Value="@looking.MyersBriggsTypeIndicator" @attributes="@AttributeHelper.GetAttributes((() => looking.MyersBriggsTypeIndicator))">
                                        <option></option>
                                        @foreach (var item in EnumHelper.GetArray<MyersBriggsTypeIndicator>())
                                        {
                                            <option value="@item">@item.GetName()</option>
                                        }
                                    </InputSelect>
                                    <span class="input-group-append">
                                        <button type="button" class="btn btn-outline btn-primary" data-toggle="modal" data-target="#modalDataHelp" @onclick="() => UpdateDataHelp(() => looking.MyersBriggsTypeIndicator, typeof(MyersBriggsTypeIndicator))">
                                            <i class="fas fa-question"></i>
                                        </button>
                                    </span>
                                </div>
                                <ValidationMessage For="@(()=>looking.MyersBriggsTypeIndicator)"></ValidationMessage>
                            </div>
                        </div>
                        <div class="form-group row">
                            <CustomLabel For="@(() => looking.RelationshipPersonality)" CssIcon="fas fa-people-arrows"></CustomLabel>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <InputSelect TValue="RelationshipPersonality?" @bind-Value="@looking.RelationshipPersonality" @attributes="@AttributeHelper.GetAttributes((() => looking.RelationshipPersonality))">
                                        <option></option>
                                        @foreach (var item in EnumHelper.GetArray<RelationshipPersonality>())
                                        {
                                            <option value="@item">@item.GetName()</option>
                                        }
                                    </InputSelect>
                                    <span class="input-group-append">
                                        <button type="button" class="btn btn-outline btn-primary" data-toggle="modal" data-target="#modalDataHelp" @onclick="() => UpdateDataHelp(() => looking.RelationshipPersonality, typeof(RelationshipPersonality))">
                                            <i class="fas fa-question"></i>
                                        </button>
                                    </span>
                                </div>
                                <ValidationMessage For="@(()=>looking.RelationshipPersonality)"></ValidationMessage>
                            </div>
                        </div>*@
                    </div>
                </div>

                <button type="submit" class="btn btn-primary">
                    <span class="fas fa-save"></span>
                    Salvar dados
                </button>
            </div>
        </div>
    </EditForm>
    <ProfileDataHelp @ref="ProfileDataHelp"></ProfileDataHelp>
}

@code {

    ProfileLookingVM looking;
    ProfileVM profile;

    private ProfileDataHelp ProfileDataHelp;

    private VisibilityOptions Options => new VisibilityOptions()
    {
        Loading = looking == null,
    };

    protected void UpdateDataHelp(System.Linq.Expressions.Expression<Func<object>> For, System.Type TypeEnum)
    {
        ProfileDataHelp.ChangeContent(For, TypeEnum);
    }

    protected override async Task LoadData()
    {
        looking = await Http.ProfileLooking_Get(LocalStorage);

        if (looking == null)
        {
            looking = new ProfileLookingVM();
        }

        profile = await Http.Profile_Get(LocalStorage);
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            HttpResponseMessage response;

            if (string.IsNullOrEmpty(looking.Id))
            {
                response = await Http.ProfileLooking_Add(LocalStorage, looking, ComponenteUtils.IdUser);
                Toast.ShowWarning("+30 XP");
            }
            else
            {
                response = await Http.ProfileLooking_Update(LocalStorage, looking);
            }

            await response.ProcessResponse(Toast, "Salvo com sucesso!");
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private void PopulateFields()
    {
        try
        {
            SmartLookingCore.PopulateFields(profile, looking);

            Toast.ShowWarning("Este processo está em constante evolução. Caso queira informar um erro ou melhoria, favor abrir um tiket no nosso suporte.");
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }
}