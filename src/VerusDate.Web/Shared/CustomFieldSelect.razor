@inherits BaseCustomField<TValue>
@typeparam TValue
@typeparam TEnum

<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.IsFull.OnWidescreen.Is4.OnFullHD">
        <Icon Name="@CssIcon"></Icon> @Label
        @if (!string.IsNullOrEmpty(AttributeHelper.GetDescription(For)))
        {
            <FieldHelp Style="color: #17a2b8 !important">@AttributeHelper.GetDescription(For)</FieldHelp>
        }
    </FieldLabel>

    <FieldBody ColumnSize="ColumnSize.IsFull.OnWidescreen.Is8.OnFullHD">
        @switch (Type)
        {
            case FieldType.Select:
                <div class="input-group">
                    <InputSelect TValue="TValue" Value="@SelectedValue" ValueChanged="@SetValue" ValueExpression="@For" @attributes="@GetAttributes(For, disabled: Disabled)">
                        <option></option>
                        @foreach (var item in EnumHelper.GetArray<TEnum>())
                        {
                            <option value="@item">@item.GetName()</option>
                        }
                    </InputSelect>
                    <span class="input-group-append">
                        <Button Color="Color.Primary" Outline="true" Disabled="@DisableHelp" Clicked="() => UpdateDataHelp(For, typeof(TEnum))">
                            <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Question"></Icon>
                        </Button>
                    </span>
                </div>

                break;

            case FieldType.SelectMultiple:
                <Addons>
                    <Addon AddonType="AddonType.Body">
                        <div class="form-control" style="height: auto;">
                            @foreach (var item in SelectedValues)
                            {
                                <Badge Color="Color.Secondary" Margin="Margin.Is1.FromRight" Style="font-size: 90%;">
                                    @item.GetName()
                                </Badge>
                            }
                        </div>
                    </Addon>
                    <Addon AddonType="AddonType.End">
                        <Button Color="Color.Primary" Outline="true" Clicked="() => UpdateDataSelect(For, typeof(TEnum))">
                            <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Plus"></Icon>
                        </Button>
                    </Addon>
                </Addons>

                break;

            default:
                break;
        }
        @if (!string.IsNullOrEmpty(HelpLink))
        {
            <a href="@HelpLink" target="_blank" style="display: block; font-size: 80%;" rel="noopener">@(new Uri(@HelpLink).Host)</a>
        }
        <ValidationMessage For="@For"></ValidationMessage>
    </FieldBody>
</Field>

<VerusDate.Web.Shared.modal.ProfileDataHelp TValue="TValue" @ref="dataHelp"></VerusDate.Web.Shared.modal.ProfileDataHelp>
<VerusDate.Web.Shared.modal.ProfileDataSelect TValue="TValue" TEnum="TEnum" SelectedValues="SelectedValues" SelectedValuesChanged="SetValues" @ref="dataSelect"></VerusDate.Web.Shared.modal.ProfileDataSelect>