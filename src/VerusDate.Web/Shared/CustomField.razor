@inherits BaseCustomField<string, CustomField>

<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.IsFull.OnWidescreen.Is4.OnFullHD">
        <Icon Name="@CssIcon"></Icon> @Label
        @if (Required)
        {<div style="color: red; display: initial;"> *</div>}
    </FieldLabel>
    <FieldBody ColumnSize="ColumnSize.IsFull.OnWidescreen.Is8.OnFullHD">
        @switch (Type)
        {
            case FieldType.TextEdit:
                <InputText Value="@Value" ValueChanged="@SetValue" ValueExpression="@For" @attributes="@GetAttributes(For, disabled: Disabled)"></InputText>
                break;

            case FieldType.TextEditButtom:
                <Addons>
                    <Addon AddonType="AddonType.Body">
                        <InputText Value="@Value" ValueChanged="@SetValue" ValueExpression="@For" @attributes="@GetAttributes(For, disabled: Disabled)"></InputText>
                    </Addon>
                    <Addon AddonType="AddonType.End">
                        <Button Color="Color.Primary" Outline="true" Clicked="@ButtomClicked" title="@ButtomTitle">
                            <Icon Name="@ButtomCssIcon"></Icon>
                        </Button>
                    </Addon>
                </Addons>
                break;

            case FieldType.MemoEdit:
                <InputTextArea Value="@Value" ValueChanged="@SetValue" ValueExpression="@For" @attributes="@GetAttributes(For, true, Disabled)"></InputTextArea>
                break;

            default:
                break;
        }
        <ValidationMessage For="@For"></ValidationMessage>
    </FieldBody>
    @if (!string.IsNullOrEmpty(AttributeHelper.GetDescription(For)))
    {
        <Column>
            <FieldHelp Style="color: #17a2b8 !important">@AttributeHelper.GetDescription(For)</FieldHelp>
        </Column>
    }
</Field>