@using System.Linq.Expressions;
@inherits ComponenteCore<ItemDataProfile>

<Badge Color="@GetColor()" Pill="true" title="@GetDescription()" Style="@GetCursor()" @onclick="@(() => Toast.ShowInfo(GetDescription(), AttributeHelper.GetName(For) + ": " + GetValue()) )">
    <Icon Name="@ClassIcon"></Icon> @GetValue()
    @if (!string.IsNullOrEmpty(GetDescription()))
    {
        <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.InfoCircle" Margin="Margin.Is1.FromLeft"></Icon>
    }
</Badge>

@code {
    [Parameter] public Expression<Func<object>> For { get; set; }
    [Parameter] public Enum Value { get; set; }
    [Parameter] public string StringValue { get; set; }
    [Parameter] public string ClassIcon { get; set; }
    [Parameter] public List<AffinityVM> Affinities { get; set; } = new();

    private string GetValue()
    {
        if (string.IsNullOrEmpty(StringValue))
        {
            if (Value == null)
                return "Não Respondido";
            else
                return Value.GetName();
        }
        else
        {
            return StringValue;
        }
    }

    private string GetDescription()
    {
        if (string.IsNullOrEmpty(StringValue))
            return Value.GetDescription();
        else
            return null;
    }

    private string GetCursor()
    {
        if (string.IsNullOrEmpty(Value.GetDescription()))
        {
            return "cursor: default";
        }
        else
        {
            return "cursor: help";
        }
    }

    private string Field => AttributeHelper.GetNameOf(For);

    private Color GetColor()
    {
        if (!Affinities.Any(s => s.AttributeName == Field))
        {
            return Color.Secondary;
        }
        else if (Affinities.Single(s => s.AttributeName == Field).HaveAffinity)
        {
            return Color.Success;
        }
        else //not affinity
        {
            return Color.Danger;
        }
    }
}