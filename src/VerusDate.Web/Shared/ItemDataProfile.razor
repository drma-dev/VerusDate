@using System.Linq.Expressions;

@if (!Affinities.Any(s => s.AttributeName == Field))
{
    <Badge Color="Color.Secondary" title="@Value.GetDescription()" Pill="true" Style="@GetCursor()">
        <Icon Name="@ClassIcon"></Icon> @GetValue()
        @if (!string.IsNullOrEmpty(@Value.GetDescription()))
        {
            <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.InfoCircle" Margin="Margin.Is1.FromLeft"></Icon>
        }
    </Badge>
}
else if (Affinities.Single(s => s.AttributeName == Field).HaveAffinity)
{
    <Badge Color="Color.Success" title="@Value.GetDescription()" Pill="true" Style="@GetCursor()">
        <Icon Name="@ClassIcon"></Icon> @GetValue()
        @if (!string.IsNullOrEmpty(@Value.GetDescription()))
        {
            <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.InfoCircle" Margin="Margin.Is1.FromLeft"></Icon>
        }
    </Badge>
}
else
{
    <Badge Color="Color.Danger" title="@Value.GetDescription()" Pill="true" Style="@GetCursor()">
        <Icon Name="@ClassIcon"></Icon> @GetValue()
        @if (!string.IsNullOrEmpty(@Value.GetDescription()))
        {
            <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.InfoCircle" Margin="Margin.Is1.FromLeft"></Icon>
        }
    </Badge>
}

@code {
    [Parameter] public Expression<Func<object>> For { get; set; }
    [Parameter] public Enum Value { get; set; }
    [Parameter] public string ClassIcon { get; set; }
    [Parameter] public List<AffinityVM> Affinities { get; set; }

    private string Title => AttributeHelper.GetName(For);
    private string Field => AttributeHelper.GetNameOf(For);

    private string GetValue()
    {
        if (Value == null)
            return "Não Respondido";
        else
            return Value.GetName();
    }

    private string GetCursor()
    {
        if (string.IsNullOrEmpty(Value.GetDescription()))
        {
            return "cursor: default";
        }
        else
        {
            return "cursor: help";
        }
    }
}