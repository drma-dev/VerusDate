@using System.Linq.Expressions;
@typeparam TValue

<Modal @ref="modal">
    <ModalBackdrop />
    <ModalContent Centered="true" Size="ModalSize.Default">
        <ModalHeader>
            <ModalTitle>@label</ModalTitle>
            <CloseButton Clicked="@modal.Hide" />
        </ModalHeader>
        <ModalBody MaxHeight="80">
            @if (TypeEnum != null)
            {
                @if (HasGroup)
                {
                    var previousGroup = "";
                    @foreach (var item in EnumHelper.GetList(TypeEnum).OrderBy(o => o.Group))
                    {
                        if (previousGroup != @item.Group)
                        {
                            <Alert Visible="true" Color="Color.Info" Padding="Padding.Is1">
                                <AlertMessage>@item.Group</AlertMessage>
                            </Alert>
                        }
                        <Paragraph Alignment="TextAlignment.Justified" Margin="Margin.Is1.FromBottom">
                            <Badge Color="Color.Primary">@item.Name</Badge>
                            <FieldHelp Style="display: inline;">@item.Description</FieldHelp>
                        </Paragraph>
                        previousGroup = @item.Group;
                    }
                }
                else
                {
                    @foreach (var item in EnumHelper.GetList(TypeEnum))
                    {
                        <Paragraph Alignment="TextAlignment.Justified" Margin="Margin.Is1.FromBottom">
                            <Badge Color="Color.Primary">@item.Name</Badge>
                            <FieldHelp Style="display: inline;">@item.Description</FieldHelp>
                        </Paragraph>
                    }
                }
            }
        </ModalBody>
    </ModalContent>
</Modal>

@code {
    private Modal modal;
    private Expression<Func<TValue>> For;
    private System.Type TypeEnum;

    [Parameter] public bool HasGroup { get; set; }

    private string label => VerusDate.Shared.Helper.AttributeHelper.GetName(For);

    public void ShowModal()
    {
        modal.Show();
    }

    public void ChangeContent(Expression<Func<TValue>> For, System.Type TypeEnum)
    {
        this.For = For;
        this.TypeEnum = TypeEnum;
        StateHasChanged();
    }
}