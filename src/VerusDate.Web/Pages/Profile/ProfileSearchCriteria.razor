@page "/ProfileSearchCriteria"
@attribute [Authorize]
@inherits PageCore<ProfileSearchCriteria>

@if (Options.HasCustomVisibility)
{
    <CustomVisibility Options="Options"></CustomVisibility>
}
else
{
    <EditForm Model="@looking" OnValidSubmit="HandleValidSubmit">
        <FluentValidationValidator />

        <Card>
            <CardHeader>
                Critérios de Busca
                <Button Size="Size.ExtraSmall" Color="Color.Primary" Float="Float.Right" Clicked="help.ShowModal" title="Ajuda" Margin="Margin.Is2.FromLeft">
                    <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Info"></Icon>
                </Button>
                <Button Size="Size.ExtraSmall" Color="Color.Primary" Float="Float.Right" Clicked="PopulateFields" title="Preencher automaticamente">
                    <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Magic"></Icon>
                </Button>
            </CardHeader>
            <CardBody>
                <Divider DividerType="DividerType.TextContent" Text="Básico"></Divider>
                <Row>
                    <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                        <Field Horizontal="true">
                            <FieldLabel ColumnSize="ColumnSize.IsFull.OnWidescreen.Is4.OnFullHD">
                                <Icon Name="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.MapMarkedAlt"></Icon> @AttributeHelper.GetName(() => looking.Distance)
                                <FieldHelp Style="color: #17a2b8 !important">@AttributeHelper.GetDescription(() => looking.Distance)</FieldHelp>
                            </FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.IsFull.OnWidescreen.Is8.OnFullHD">
                                <NumericEdit @bind-Value="@looking.Distance"></NumericEdit>
                                <ValidationMessage For="@(() => looking.Distance)"></ValidationMessage>
                            </FieldBody>
                        </Field>
                        <CustomFieldSelect Type="FieldType.Select" For="@(() => looking.MaritalStatus)" TValue="MaritalStatus?" TEnum="MaritalStatus" @bind-SelectedValue="@looking.MaritalStatus"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Heart"></CustomFieldSelect>
                        <CustomFieldSelect Type="FieldType.SelectMultiple" For="@(() => looking.Intent)" TValue="IReadOnlyList<Intent>" TEnum="Intent" @bind-SelectedValues="@looking.Intent"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Search"></CustomFieldSelect>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                        <CustomFieldSelect Type="FieldType.Select" For="@(() => looking.BiologicalSex)" TValue="BiologicalSex?" TEnum="BiologicalSex" @bind-SelectedValue="@looking.BiologicalSex"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Neuter"></CustomFieldSelect>
                        <CustomFieldSelect Type="FieldType.Select" For="@(() => looking.GenderIdentity)" TValue="GenderIdentity?" TEnum="GenderIdentity" @bind-SelectedValue="@looking.GenderIdentity"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Neuter"></CustomFieldSelect>
                        <CustomFieldSelect Type="FieldType.Select" For="@(() => looking.SexualOrientation)" TValue="SexualOrientation?" TEnum="SexualOrientation" @bind-SelectedValue="@looking.SexualOrientation"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Neuter"></CustomFieldSelect>
                        <CustomFieldSelect Type="FieldType.SelectMultiple" For="@(() => looking.Languages)" TValue="IReadOnlyList<Language>" TEnum="Language" @bind-SelectedValues="@looking.Languages"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Language" DisableHelp="true"></CustomFieldSelect>
                    </Column>
                </Row>
                <Divider DividerType="DividerType.TextContent" Text="Bio"></Divider>
                <Row>
                    <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                        <Field Horizontal="true">
                            <FieldLabel ColumnSize="ColumnSize.IsFull.OnWidescreen.Is4.OnFullHD">
                                <Icon Name="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.BirthdayCake"></Icon> @AttributeHelper.GetName(() => looking.MinimalAge)
                                <FieldHelp Style="color: #17a2b8 !important">@AttributeHelper.GetDescription(() => looking.MinimalAge)</FieldHelp>
                            </FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.IsFull.OnWidescreen.Is4.OnFullHD">
                                <NumericEdit @bind-Value="@looking.MinimalAge"></NumericEdit>
                                <ValidationMessage For="@(() => looking.MinimalAge)"></ValidationMessage>
                            </FieldBody>
                            <FieldBody ColumnSize="ColumnSize.IsFull.OnWidescreen.Is4.OnFullHD">
                                <NumericEdit @bind-Value="@looking.MaxAge"></NumericEdit>
                                <ValidationMessage For="@(() => looking.MaxAge)"></ValidationMessage>
                            </FieldBody>
                        </Field>

                        <Field Horizontal="true">
                            <FieldLabel ColumnSize="ColumnSize.IsFull.OnWidescreen.Is4.OnFullHD">
                                <Icon Name="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Ruler"></Icon> @AttributeHelper.GetName(() => looking.MinimalHeight)
                            </FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.IsFull.OnWidescreen.Is4.OnFullHD">                                
                                <InputSelect TValue="Height?" @bind-Value="@looking.MinimalHeight" @attributes="@(new Dictionary<string, object>() { { "class", "form-control" } })">
                                    <option></option>
                                    @foreach (var item in EnumHelper.GetArray<Height>())
                                    {
                                        <option value="@item">@item.GetName()</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => looking.MinimalHeight)"></ValidationMessage>
                            </FieldBody>
                            <FieldBody ColumnSize="ColumnSize.IsFull.OnWidescreen.Is4.OnFullHD">
                                <InputSelect TValue="Height?" @bind-Value="@looking.MaxHeight" @attributes="@(new Dictionary<string, object>() { { "class", "form-control" } })">
                                    <option></option>
                                    @foreach (var item in EnumHelper.GetArray<Height>())
                                    {
                                        <option value="@item">@item.GetName()</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => looking.MaxHeight)"></ValidationMessage>
                            </FieldBody>
                        </Field>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                        <CustomFieldSelect Type="FieldType.Select" For="@(() => looking.RaceCategory)" TValue="RaceCategory?" TEnum="RaceCategory" @bind-SelectedValue="@looking.RaceCategory"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Globe"></CustomFieldSelect>
                        <CustomFieldSelect Type="FieldType.Select" For="@(() => looking.BodyMass)" TValue="BodyMass?" TEnum="BodyMass" @bind-SelectedValue="@looking.BodyMass"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Weight" DisableHelp="true"></CustomFieldSelect>
                    </Column>
                </Row>
                <Divider DividerType="DividerType.TextContent" Text="Lifestyle"></Divider>
                <Row>
                    <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                        <CustomFieldSelect Type="FieldType.Select" For="@(() => looking.Drink)" TValue="Drink?" TEnum="Drink" @bind-SelectedValue="@looking.Drink"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.GlassCheers"></CustomFieldSelect>
                        <CustomFieldSelect Type="FieldType.Select" For="@(() => looking.Smoke)" TValue="Smoke?" TEnum="Smoke" @bind-SelectedValue="@looking.Smoke"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Smoking" DisableHelp="true"></CustomFieldSelect>
                        <CustomFieldSelect Type="FieldType.Select" For="@(() => looking.Diet)" TValue="Diet?" TEnum="Diet" @bind-SelectedValue="@looking.Diet"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Utensils" Disabled="@looking.Intent.IsShortTerm(true)"></CustomFieldSelect>
                        <CustomFieldSelect Type="FieldType.Select" For="@(() => looking.HaveChildren)" TValue="HaveChildren?" TEnum="HaveChildren" @bind-SelectedValue="@looking.HaveChildren"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Child" Disabled="@looking.Intent.IsShortTerm(true)" DisableHelp="true"></CustomFieldSelect>
                        <CustomFieldSelect Type="FieldType.Select" For="@(() => looking.WantChildren)" TValue="WantChildren?" TEnum="WantChildren" @bind-SelectedValue="@looking.WantChildren"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Baby" Disabled="@looking.Intent.IsShortTerm(true)" DisableHelp="true"></CustomFieldSelect>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                        <CustomFieldSelect Type="FieldType.Select" For="@(() => looking.EducationLevel)" TValue="EducationLevel?" TEnum="EducationLevel" @bind-SelectedValue="@looking.EducationLevel"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.GraduationCap" Disabled="@looking.Intent.IsShortTerm(true)" DisableHelp="true"></CustomFieldSelect>
                        <CustomFieldSelect Type="FieldType.Select" For="@(() => looking.CareerCluster)" TValue="CareerCluster?" TEnum="CareerCluster" @bind-SelectedValue="@looking.CareerCluster"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Briefcase" Disabled="@looking.Intent.IsShortTerm(true)"></CustomFieldSelect>
                        <CustomFieldSelect Type="FieldType.Select" For="@(() => looking.Religion)" TValue="Religion?" TEnum="Religion" @bind-SelectedValue="@looking.Religion"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.PrayingHands" Disabled="@looking.Intent.IsShortTerm(true)"></CustomFieldSelect>
                        @*<CustomFieldSelect Type="FieldType.Select" For="@(() => looking.MoneyPersonality)" TValue="MoneyPersonality?" TEnum="MoneyPersonality" @bind-SelectedValue="@looking.MoneyPersonality"
                                                CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Wallet" Disabled="@looking.Intent.IsShortTerm(true)"></CustomFieldSelect>
                            <CustomFieldSelect Type="FieldType.Select" For="@(() => looking.MyersBriggsTypeIndicator)" TValue="MyersBriggsTypeIndicator?" TEnum="MyersBriggsTypeIndicator" @bind-SelectedValue="@looking.MyersBriggsTypeIndicator"
                                                CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.User" Disabled="@looking.Intent.IsShortTerm(true)"></CustomFieldSelect>
                            <CustomFieldSelect Type="FieldType.Select" For="@(() => looking.RelationshipPersonality)" TValue="RelationshipPersonality?" TEnum="RelationshipPersonality" @bind-SelectedValue="@looking.RelationshipPersonality"
                                                CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.PeopleArrows" Disabled="@looking.Intent.IsShortTerm(true)"></CustomFieldSelect>*@
                    </Column>
                </Row>
            </CardBody>
            <CardFooter>
                <Button Type="ButtonType.Submit" Color="Color.Primary">
                    <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Save"></Icon> Salvar Dados
                </Button>
                @if (profile.Looking != null)
                {
                    <Badge Color="Color.Danger" Margin="Margin.Is3.FromLeft">
                        <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Crown"></Icon> -100 XP
                    </Badge>
                }
            </CardFooter>
        </Card>
    </EditForm>

    <VerusDate.Web.Shared.modal.BasicModal @ref="help" Title="Ajuda">
        <ul>
            <li>Aqui você pode definir seu tipo ideal de perfil, para incrementar nossas sugestões e também para calcular o percentual de afinidades</li>
        </ul>
    </VerusDate.Web.Shared.modal.BasicModal>
}

@code {

    private ProfileModel profile;
    private ProfileLookingModel looking;

    private Shared.modal.BasicModal help;

    //private Shared.modal.ProfileDataHelp<object> ProfileDataHelp;

    private VisibilityOptions Options => new VisibilityOptions()
    {
        Loading = looking == null,
    };

    protected override async Task LoadData()
    {
        profile = await Http.Profile_Get(SessionStorage);

        if (profile == null)
        {
            Toast.ShowWarning("Favor, atualizar primeiro seu perfil");
            return;
        }

        looking = profile.Looking;

        if (looking == null)
        {
            looking = new();
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            HttpResponseMessage response;

            profile.Looking = looking;

            if (profile.Looking == null)
            {
                response = await Http.Profile_UpdateLooking(profile, SessionStorage);

                if (response.IsSuccessStatusCode)
                    Toast.ShowWarning("+30 XP");
            }
            else
            {
                response = await Http.Profile_UpdateLooking(profile, SessionStorage);

                if (response.IsSuccessStatusCode)
                    Toast.ShowWarning("-100 XP");
            }

            if (response.IsSuccessStatusCode)
            {
                profile = await Http.Profile_Get(SessionStorage);
            }

            await response.ProcessResponse(Toast, "Salvo com sucesso!");
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private void PopulateFields()
    {
        try
        {
            SmartLookingCore.PopulateFields(profile, looking);

            Toast.ShowWarning("Este processo está em constante evolução. Caso queira informar um erro ou melhoria, favor abrir um tiket no nosso suporte.");
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }
}