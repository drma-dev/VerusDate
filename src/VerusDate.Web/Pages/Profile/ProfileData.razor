@page "/Profile/Data"
@attribute [Authorize]
@inherits PageCore<ProfileData>
@using BrowserInterop.Extensions

@if (Options.HasCustomVisibility)
{
    <CustomVisibility Options="Options"></CustomVisibility>
}
else
{
    <EditForm Model="@profile" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
        <FluentValidationValidator />
        <Card Margin="Margin.Is3.FromBottom">
            <CardHeader>
                Perfil
                <Button Size="Size.ExtraSmall" Color="Color.Primary" Float="Float.Right" Clicked="help.ShowModal" title="Ajuda" Margin="Margin.Is2.FromLeft">
                    <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.ExclamationCircle"></Icon>
                </Button>
                <Button Size="Size.ExtraSmall" Color="Color.Danger" Float="Float.Right" Clicked="privacy.ShowModal" title="Termos de Privacidade">
                    <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.UserShield"></Icon>
                </Button>
            </CardHeader>
            <CardBody>
                <Alert Visible="true" Color="Color.Info" Padding="Padding.Is2">
                    <AlertMessage>Básico</AlertMessage>
                </Alert>
                <Row>
                    <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                        <CustomField Type="FieldType.TextEdit" For="@(() => profile.Basic.NickName)" @bind-Value="@profile.Basic.NickName"
                                     CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.User" Required="true"></CustomField>
                        <CustomField Type="FieldType.MemoEdit" For="@(() => profile.Basic.Description)" @bind-Value="@profile.Basic.Description"
                                     CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.QuoteLeft" Rows="7" Required="true"></CustomField>
                        <CustomField Type="FieldType.TextEditButtom" For="@(() => profile.Basic.Location)" @bind-Value="@profile.Basic.Location"
                                     CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.MapMarkerAlt" Disabled="true" Required="true"
                                     ButtomClicked="async ()=> { await SetLocation(profile); }" ButtomCssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.MapMarkedAlt" ButtomTitle="Recuperar posição GPS"></CustomField>
                        <CustomFieldSelect Type="FieldType.SelectMultiple" For="@(() => profile.Basic.Languages)" TValue="IReadOnlyList<Language>" TEnum="Language" @bind-SelectedValues="@profile.Basic.Languages"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Language" Required="true"></CustomFieldSelect>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                        <CustomFieldSelect Type="FieldType.Select" For="@(() => profile.Basic.CurrentSituation)" TValue="CurrentSituation" TEnum="CurrentSituation" @bind-SelectedValue="@profile.Basic.CurrentSituation"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Heart" Required="true"></CustomFieldSelect>
                        <CustomFieldSelect Type="FieldType.SelectMultiple" For="@(() => profile.Basic.Intent)" TValue="IReadOnlyList<Intent>" TEnum="Intent" @bind-SelectedValues="@profile.Basic.Intent"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Search" HasGroup="true" Required="true"></CustomFieldSelect>
                        <CustomFieldSelect Type="FieldType.Select" For="@(() => profile.Basic.BiologicalSex)" TValue="BiologicalSex" TEnum="BiologicalSex" @bind-SelectedValue="@profile.Basic.BiologicalSex"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Neuter" Required="true"></CustomFieldSelect>
                        <CustomFieldSelect Type="FieldType.Select" For="@(() => profile.Basic.GenderIdentity)" TValue="GenderIdentity" TEnum="GenderIdentity" @bind-SelectedValue="@profile.Basic.GenderIdentity"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Neuter" HasGroup="true" Required="true"></CustomFieldSelect>
                        <CustomFieldSelect Type="FieldType.Select" For="@(() => profile.Basic.SexualOrientation)" TValue="SexualOrientation" TEnum="SexualOrientation" @bind-SelectedValue="@profile.Basic.SexualOrientation"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Neuter" Required="true"></CustomFieldSelect>
                    </Column>
                </Row>
                <Alert Visible="true" Color="Color.Info" Padding="Padding.Is2">
                    <AlertMessage>Bio</AlertMessage>
                </Alert>
                <Row>
                    <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                        <CustomDate Type="FieldType.Date" For="@(() => profile.Bio.BirthDate)" @bind-Value="@profile.Bio.BirthDate"
                                    CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.BirthdayCake" Required="true"></CustomDate>
                        <Field Horizontal="true">
                            <FieldLabel ColumnSize="ColumnSize.IsFull.OnWidescreen.Is4.OnFullHD" Display="Display.None.Block.OnFullHD">
                            </FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.IsHalf.Is4.OnFullHD">
                                <TextEdit Text="@(profile.Bio.BirthDate.GetAge() + " Anos")" Disabled="true"></TextEdit>
                            </FieldBody>
                            <FieldBody ColumnSize="ColumnSize.IsHalf.Is4.OnFullHD">
                                <TextEdit Text="@profile.Bio.BirthDate.GetZodiac().GetName()" Disabled="true"></TextEdit>
                            </FieldBody>
                        </Field>
                        <CustomFieldSelect Type="FieldType.Select" For="@(() => profile.Bio.BodyMass)" TValue="BodyMass" TEnum="BodyMass" @bind-SelectedValue="@profile.Bio.BodyMass"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Weight" DisableHelp="true" Required="true"></CustomFieldSelect>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                        <CustomFieldSelect Type="FieldType.Select" For="@(() => profile.Bio.RaceCategory)" TValue="RaceCategory" TEnum="RaceCategory" @bind-SelectedValue="@profile.Bio.RaceCategory"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Globe" Required="true"></CustomFieldSelect>
                        <CustomFieldSelect Type="FieldType.Select" For="@(() => profile.Bio.Height)" TValue="Height" TEnum="Height" @bind-SelectedValue="@profile.Bio.Height"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Ruler" DisableHelp="true" Required="true"></CustomFieldSelect>
                    </Column>
                </Row>
                <Alert Visible="true" Color="Color.Info" Padding="Padding.Is2">
                    <AlertMessage>Lifestyle / Personalidades</AlertMessage>
                    <AlertDescription>Disponível apenas para intenções de relacionamento do tipo Longo Prazo</AlertDescription>
                </Alert>
                <Row>
                    <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                        <CustomFieldSelect Type="FieldType.Select" For="@(() => profile.Lifestyle.Drink)" TValue="Drink?" TEnum="Drink" @bind-SelectedValue="@profile.Lifestyle.Drink"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.GlassCheers" Disabled="@profile.Basic.Intent.IsShortTerm(true)" Required="@profile.Basic.Intent.IsLongTerm()"></CustomFieldSelect>
                        <CustomFieldSelect Type="FieldType.Select" For="@(() => profile.Lifestyle.Smoke)" TValue="Smoke?" TEnum="Smoke" @bind-SelectedValue="@profile.Lifestyle.Smoke"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Smoking" Disabled="@profile.Basic.Intent.IsShortTerm(true)" DisableHelp="true" Required="@profile.Basic.Intent.IsLongTerm()"></CustomFieldSelect>
                        <CustomFieldSelect Type="FieldType.Select" For="@(() => profile.Lifestyle.Diet)" TValue="Diet?" TEnum="Diet" @bind-SelectedValue="@profile.Lifestyle.Diet"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Utensils" Disabled="@profile.Basic.Intent.IsShortTerm(true)" Required="@profile.Basic.Intent.IsLongTerm()"></CustomFieldSelect>
                        <CustomFieldSelect Type="FieldType.Select" For="@(() => profile.Lifestyle.HaveChildren)" TValue="HaveChildren?" TEnum="HaveChildren" @bind-SelectedValue="@profile.Lifestyle.HaveChildren"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Child" Disabled="@profile.Basic.Intent.IsShortTerm(true)" DisableHelp="true" Required="@profile.Basic.Intent.IsLongTerm()"></CustomFieldSelect>
                        <CustomFieldSelect Type="FieldType.Select" For="@(() => profile.Lifestyle.WantChildren)" TValue="WantChildren?" TEnum="WantChildren" @bind-SelectedValue="@profile.Lifestyle.WantChildren"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Baby" Disabled="@profile.Basic.Intent.IsShortTerm(true)" DisableHelp="true" Required="@profile.Basic.Intent.IsLongTerm()"></CustomFieldSelect>
                        <CustomFieldSelect Type="FieldType.Select" For="@(() => profile.Lifestyle.EducationLevel)" TValue="EducationLevel?" TEnum="EducationLevel" @bind-SelectedValue="@profile.Lifestyle.EducationLevel"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.GraduationCap" Disabled="@profile.Basic.Intent.IsShortTerm(true)" DisableHelp="true" Required="@profile.Basic.Intent.IsLongTerm()"></CustomFieldSelect>
                        <CustomFieldSelect Type="FieldType.Select" For="@(() => profile.Lifestyle.CareerCluster)" TValue="CareerCluster?" TEnum="CareerCluster" @bind-SelectedValue="@profile.Lifestyle.CareerCluster"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Briefcase" Disabled="@profile.Basic.Intent.IsShortTerm(true)" HasGroup="true" Required="@profile.Basic.Intent.IsLongTerm()"></CustomFieldSelect>
                        <CustomFieldSelect Type="FieldType.Select" For="@(() => profile.Lifestyle.Religion)" TValue="Religion?" TEnum="Religion" @bind-SelectedValue="@profile.Lifestyle.Religion"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.PrayingHands" Disabled="@profile.Basic.Intent.IsShortTerm(true)" Required="@profile.Basic.Intent.IsLongTerm()"></CustomFieldSelect>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                        <CustomFieldSelect Type="FieldType.Select" For="@(() => profile.Lifestyle.MoneyPersonality)" TValue="MoneyPersonality?" TEnum="MoneyPersonality" @bind-SelectedValue="@profile.Lifestyle.MoneyPersonality"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Wallet" Disabled="@profile.Basic.Intent.IsShortTerm(true)" Required="@profile.Basic.Intent.IsLongTerm()" LabelSize="LabelSize.Big"></CustomFieldSelect>
                        <CustomFieldSelect Type="FieldType.Select" For="@(() => profile.Lifestyle.RelationshipPersonality)" TValue="RelationshipPersonality?" TEnum="RelationshipPersonality" @bind-SelectedValue="@profile.Lifestyle.RelationshipPersonality"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.PeopleArrows" Disabled="@profile.Basic.Intent.IsShortTerm(true)" Required="@profile.Basic.Intent.IsLongTerm()" LabelSize="LabelSize.Big"></CustomFieldSelect>
                        <CustomFieldSelect Type="FieldType.Select" For="@(() => profile.Lifestyle.SexPersonality)" TValue="SexPersonality?" TEnum="SexPersonality" @bind-SelectedValue="@profile.Lifestyle.SexPersonality"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Heart" Disabled="@profile.Basic.Intent.IsShortTerm(true)" Required="@profile.Basic.Intent.IsLongTerm()" LabelSize="LabelSize.Big" HelpLink="https://www.vmtherapy.com/personality-type/"></CustomFieldSelect>
                        <CustomFieldSelect Type="FieldType.SelectMultiple" For="@(() => profile.Lifestyle.SexPersonalityPreferences)" TValue="IReadOnlyList<SexPersonality>" TEnum="SexPersonality" @bind-SelectedValues="@profile.Lifestyle.SexPersonalityPreferences"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Heart" Disabled="@profile.Basic.Intent.IsShortTerm(true)" LabelSize="LabelSize.Big"></CustomFieldSelect>
                        <CustomFieldSelect Type="FieldType.Select" For="@(() => profile.Lifestyle.LoveLanguage)" TValue="LoveLanguage?" TEnum="LoveLanguage" @bind-SelectedValue="@profile.Lifestyle.LoveLanguage"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.HandHoldingHeart" Disabled="@profile.Basic.Intent.IsShortTerm(true)" LabelSize="LabelSize.Big" Required="@profile.Basic.Intent.IsLongTerm()" HelpLink="https://www.5lovelanguages.com/quizzes/singles-quiz/"></CustomFieldSelect>
                        <CustomFieldSelect Type="FieldType.Select" For="@(() => profile.Lifestyle.MyersBriggsTypeIndicator)" TValue="MyersBriggsTypeIndicator?" TEnum="MyersBriggsTypeIndicator" @bind-SelectedValue="@profile.Lifestyle.MyersBriggsTypeIndicator"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.User" Disabled="@profile.Basic.Intent.IsShortTerm(true)" LabelSize="LabelSize.Big" HelpLink="https://www.16personalities.com/" HasGroup="true"></CustomFieldSelect>
                    </Column>
                </Row>
                <Alert Visible="true" Color="Color.Info" Padding="Padding.Is2">
                    <AlertMessage>Interesses</AlertMessage>
                    <AlertDescription>Os itens deste tópico são opcionais, mas a falta deles poderá afetar o índice de compatibilidade. (3 opções para cada)</AlertDescription>
                </Alert>
                <Row>
                    <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                        <CustomFieldSelect Type="FieldType.SelectMultiple" For="@(() => profile.Interest.Food)" TValue="IReadOnlyList<Food>" TEnum="Food" @bind-SelectedValues="@profile.Interest.Food"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.PizzaSlice" Disabled="@profile.Basic.Intent.IsShortTerm(true)" LabelSize="LabelSize.Short"></CustomFieldSelect>
                        <CustomFieldSelect Type="FieldType.SelectMultiple" For="@(() => profile.Interest.Holidays)" TValue="IReadOnlyList<Holidays>" TEnum="Holidays" @bind-SelectedValues="@profile.Interest.Holidays"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.PlaneDeparture" Disabled="@profile.Basic.Intent.IsShortTerm(true)" LabelSize="LabelSize.Short"></CustomFieldSelect>
                        <CustomFieldSelect Type="FieldType.SelectMultiple" For="@(() => profile.Interest.Sports)" TValue="IReadOnlyList<Sports>" TEnum="Sports" @bind-SelectedValues="@profile.Interest.Sports"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Swimmer" Disabled="@profile.Basic.Intent.IsShortTerm(true)" LabelSize="LabelSize.Short"></CustomFieldSelect>
                        <CustomFieldSelect Type="FieldType.SelectMultiple" For="@(() => profile.Interest.LeisureActivities)" TValue="IReadOnlyList<LeisureActivities>" TEnum="LeisureActivities" @bind-SelectedValues="@profile.Interest.LeisureActivities"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.UmbrellaBeach" Disabled="@profile.Basic.Intent.IsShortTerm(true)" LabelSize="LabelSize.Short"></CustomFieldSelect>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                        <CustomFieldSelect Type="FieldType.SelectMultiple" For="@(() => profile.Interest.MusicGenre)" TValue="IReadOnlyList<MusicGenre>" TEnum="MusicGenre" @bind-SelectedValues="@profile.Interest.MusicGenre"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Music" Disabled="@profile.Basic.Intent.IsShortTerm(true)" LabelSize="LabelSize.Short"></CustomFieldSelect>
                        <CustomFieldSelect Type="FieldType.SelectMultiple" For="@(() => profile.Interest.MovieGenre)" TValue="IReadOnlyList<MovieGenre>" TEnum="MovieGenre" @bind-SelectedValues="@profile.Interest.MovieGenre"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Film" Disabled="@profile.Basic.Intent.IsShortTerm(true)" LabelSize="LabelSize.Short"></CustomFieldSelect>
                        <CustomFieldSelect Type="FieldType.SelectMultiple" For="@(() => profile.Interest.TVGenre)" TValue="IReadOnlyList<TVGenre>" TEnum="TVGenre" @bind-SelectedValues="@profile.Interest.TVGenre"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Tv" Disabled="@profile.Basic.Intent.IsShortTerm(true)" LabelSize="LabelSize.Short"></CustomFieldSelect>
                        <CustomFieldSelect Type="FieldType.SelectMultiple" For="@(() => profile.Interest.ReadingGenre)" TValue="IReadOnlyList<ReadingGenre>" TEnum="ReadingGenre" @bind-SelectedValues="@profile.Interest.ReadingGenre"
                                           CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.BookReader" Disabled="@profile.Basic.Intent.IsShortTerm(true)" LabelSize="LabelSize.Short"></CustomFieldSelect>
                    </Column>
                </Row>
            </CardBody>
            <CardFooter>
                @*<Button Type="ButtonType.Submit" Color="Color.Primary" Disabled="@(profile.GetDataStatus() != DataStatus.New && profile.DaysUpdate() < 1)">
                        <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Save"></Icon> Salvar Dados
                    </Button>*@
                <Button Type="ButtonType.Submit" Color="Color.Primary">
                    <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Save"></Icon> Salvar Dados
                </Button>
                @*<Badge Color="Color.Danger" Margin="Margin.Is3.FromLeft">
                        <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.ExclamationTriangle"></Icon> Só poderá atualizar no máximo uma vez ao dia e perderá 100 XP a cada atualização
                    </Badge>*@
            </CardFooter>
        </Card>
    </EditForm>

    <VerusDate.Web.Shared.modal.BasicModal @ref="privacy" Title="Termos de privacidade">
        <ul>
            <li>Pedimos que leia nosso '<a href="/Terms/pt" target="_blank">Termos de Uso</a>' para ficar ciente de como seus dados serão tratados;</li>
            <li>Seja honesto nas respostas dadas neste formulário. Todas as informações aqui contidas estão abertas a denúncias e poderão ser avaliadas;</li>
        </ul>
    </VerusDate.Web.Shared.modal.BasicModal>

    <VerusDate.Web.Shared.modal.BasicModal @ref="help" Title="Ajuda">
        <Paragraph Margin="Margin.Is2.FromBottom" Alignment="TextAlignment.Justified">
            <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.EyeSlash"></Icon> Este conteúdo é privado e não será exibido no seu perfil
        </Paragraph>
        <Paragraph Margin="Margin.Is2.FromBottom" Alignment="TextAlignment.Justified">
            <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Question"></Icon> Esta opção terá explicações de cada um dos itens disponíveis para escolha
        </Paragraph>
        <Paragraph Margin="Margin.Is2.FromBottom" Alignment="TextAlignment.Justified">
            <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Plus"></Icon> Esta opção abrirá um popup com múltiplas escolhas (juntamente com explicações, caso tenha)
        </Paragraph>
        <Paragraph Margin="Margin.Is2.FromBottom" Alignment="TextAlignment.Justified">
            <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.MapMarkedAlt"></Icon> Esta opção solicitará localização para seu aparelho (precisa estar habilitada esta opção)
        </Paragraph>
    </VerusDate.Web.Shared.modal.BasicModal>
}

@code {

    private ProfileModel profile = new();
    private GeoLocation GPS = new();
    protected bool IsShortTerm { get { return !profile.Basic.Intent.IsLongTerm(); } }
    private Shared.modal.BasicModal privacy;
    private Shared.modal.BasicModal help;

    private VisibilityOptions Options => new VisibilityOptions()
    {
        Loading = IsLoading
    };

    protected override async Task LoadData()
    {
        profile = await Http.Profile_Get(SessionStorage);

        if (profile == null) //para novos usuários
        {
            profile = new();

            profile.Basic = new();
            profile.Bio = new();
            profile.Lifestyle = new();
            profile.Interest = new();

            profile.Basic.GenderIdentity = GenderIdentity.Cisgender;
            profile.Basic.SexualOrientation = SexualOrientation.Heteressexual;
            profile.Bio.BirthDate = DateTime.UtcNow.AddYears(-18).AddDays(1).Date;
            profile.Lifestyle.Diet = Diet.Omnivore;
        }
    }

    private async Task SetLocation(ProfileModel profile)
    {
        if (profile != null && profile.Basic != null /*&& !profile.Basic.Longitude.HasValue*/)
        {
            var window = await JsRuntime.Window();
            var navigator = await window.Navigator();
            var position = await navigator.Geolocation.GetCurrentPosition();

            if (position.Error != null)
            {
                Toast.ShowWarning("", position.Error.Message);
            }
            else if (position.Location != null)
            {
                GPS.Latitude = position.Location.Coords.Latitude;
                GPS.Longitude = position.Location.Coords.Longitude;
                GPS.Accuracy = position.Location.Coords.Accuracy;

                //TODO: chamar código da api
                var here = await Http.Map_GetLocation(SessionStorage, GPS.Latitude, GPS.Longitude);
                if (here.items.Any())
                {
                    var address = here.items[0].address;
                    profile.Basic.Location = address.GetLocation();

                    AddLanguages((Country)System.Enum.Parse(typeof(Country), address.countryCode));
                }
                else
                {
                    profile.Basic.Location = "Localização Desconhecida";
                }

                profile.Basic.Longitude = GPS.Longitude;
                profile.Basic.Latitude = GPS.Latitude;

                if (GPS.Accuracy > 500)
                {
                    Toast.ShowWarning("", $"A posição do GPS foi recuperada, mas a precisão é de apenas: {Math.Round(GPS.Accuracy / 1000, 1)} km. Tente novamente mais tarde ou use um dispositivo mais preciso.");
                }
            }
            else
            {
                Toast.ShowWarning("", $"Não foi possível detectar um sistema GPS no seu dispositivo. Favor, tentar novamente ou liberar acesso ao GPS do seu dispositivo.");
            }
        }
    }

    private void AddLanguages(Country country)
    {
        //https://pt.wikipedia.org/wiki/Lista_de_l%C3%ADnguas_oficiais
        if (profile.Basic.Languages.Any()) return;

        switch (country)
        {
            case Country.BRA:
                profile.Basic.Languages = new Language[] { Language.Portuguese };
                break;
            default:
                break;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            profile.ClearSimpleView();

            profile.Bio.Zodiac = profile.Bio.BirthDate.GetZodiac();

            if (profile.GetDataStatus() == DataStatus.New)
            {
                await Http.Profile_Add(profile, SessionStorage, Toast);
            }
            else
            {
                await Http.Profile_Update(profile, SessionStorage, Toast);
            }

            profile = await Http.Profile_Get(SessionStorage);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private void HandleInvalidSubmit()
    {
        Toast.ShowWarning("", "Foram detectados erros de validação");
    }
}