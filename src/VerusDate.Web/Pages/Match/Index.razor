@page "/Match"
@attribute [Authorize]
@inherits PageCore<Pages.Match.Index>

@if (Options.HasCustomVisibility)
{
    <CustomVisibility Options="Options"></CustomVisibility>
}
else
{
    <Row>
        <Column ColumnSize="ColumnSize.Is8.OnTablet.Is6.OnWidescreen.Is4.OnFullHD">
            <Card Margin="Margin.Is2.FromBottom.OnMobile">
                <CardImage Source="@getCurrentProfile().GetMainPhoto()" Alt="@labelPhoto"></CardImage>
                <Badge Color="Color.Secondary" Style="position: absolute; bottom: 68px; left: 5px;">@getCurrentProfile().NickName, @getCurrentProfile().Age, @getCurrentProfile().Distance Km</Badge>
                @if (getCurrentProfile().ActivityStatus == VerusDate.Shared.Enum.ActivityStatus.Today)
                {
                    <Badge Color="Color.Success" Style="position: absolute; top: 5px; left: 5px;" title="logado recentemente">
                        <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.DotCircle"></Icon>
                    </Badge>
                }
                else if (getCurrentProfile().ActivityStatus == VerusDate.Shared.Enum.ActivityStatus.Week)
                {
                    <Badge Color="Color.Warning" Style="position: absolute; top: 5px; left: 5px;" title="logado essa semana">
                        <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.DotCircle"></Icon>
                    </Badge>
                }
                else if (getCurrentProfile().ActivityStatus == VerusDate.Shared.Enum.ActivityStatus.Month)
                {
                    <Badge Color="Color.Danger" Style="position: absolute; top: 5px; left: 5px;" title="logado esse mês">
                        <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.DotCircle"></Icon>
                    </Badge>
                }
                else
                {
                    <Badge Color="Color.Dark" Style="position: absolute; top: 5px; left: 5px;" title="usuário desativado">
                        <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.DotCircle"></Icon>
                    </Badge>
                }
                <CardBody Padding="Padding.Is2">
                    <Paragraph Alignment="TextAlignment.Center" Margin="Margin.Is0">
                        <BtnDeslike IdUserView="@getCurrentProfile().Id" OnClick="Interact"></BtnDeslike>
                        <BtnBlink IdUserView="@getCurrentProfile().Id" OnClick="Interact"></BtnBlink>
                        <BtnLike IdUserView="@getCurrentProfile().Id" OnClick="Interact"></BtnLike>
                    </Paragraph>
                </CardBody>
            </Card>
            <Card>
                <CardBody Padding="Padding.Is2">
                    <Button Color="Color.Success" title="Percentual de Afinidade" Float="Float.Left">
                        Afinidade <Badge Color="Color.Light">100%</Badge>
                    </Button>
                    <Button Color="Color.Danger" title="Reportar este perfil" Float="Float.Right" data-toggle="modal" data-target="#modalReport">
                        <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.ExclamationCircle"></Icon> Reportar
                    </Button>
                </CardBody>
            </Card>
        </Column>
    </Row>
    <VerusDate.Web.Shared.modal.ProfileReport></VerusDate.Web.Shared.modal.ProfileReport>
}

@code {

    //private ProfileLookingModel looking;
    private List<ProfileSearch> matches;
    //private Affinity objAffinity;
    private int pos;

    private string labelPhoto => $"{getCurrentProfile().NickName}, {getCurrentProfile().Age}, {getCurrentProfile().Distance}";

    private VisibilityOptions Options => new VisibilityOptions()
    {
        Loading = matches == null,
        NoData = (matches != null && !matches.Any()) || pos >= matches?.Count
    };

    protected override async Task LoadData()
    {
        var list = await Http.Profile_ListMatch(SessionStorage);
        matches = list.Where(w => w.Visible).ToList();
        //looking = await Http.ProfileLooking_Get(LocalStorage);
    }

    private VerusDate.Shared.ModelQuery.ProfileSearch getCurrentProfile()
    {
        if (pos >= matches.Count) return null;

        return matches[pos];
    }

    private void Interact()
    {
        matches[pos].Visible = false;
        pos++;

        SessionStorage.Update_Profile_ListMatch(matches);
        //objAffinity.RefreshComponente(looking, getCurrentProfile());
    }
}