@page "/Interaction/View/{IdUserView}"
@attribute [Authorize]
@inherits PageCore<Interaction.View>

@if (Options.HasCustomVisibility)
{
    <CustomVisibility Options="Options"></CustomVisibility>
}
else
{
    <Row>
        <Column ColumnSize="ColumnSize.Is6.OnDesktop.Is4.OnWidescreen">
            <Card Margin="Margin.Is3.FromBottom">
                <CardImage Source="@view.GetMainPhoto()" Alt="@labelPhoto"></CardImage>
                <Tooltip Text="Perfil compatível com o que você procura" Multiline="true" Fade="true" Placement="Placement.Right" Style="position: absolute; top: 5px; left: 10px; cursor: help;">
                    <Badge Color="Color.Success">@(GetPercentAffinity() + "%")</Badge>
                </Tooltip>

                @if (view.ActivityStatus == VerusDate.Shared.Enum.ActivityStatus.Today)
                {
                    <Tooltip Text="logado recentemente" Multiline="true" Fade="true" Placement="Placement.Left" Style="position: absolute; top: 5px; right: 10px; cursor: help;">
                        <Badge Color="Color.Success">
                            <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.DotCircle"></Icon>
                        </Badge>
                    </Tooltip>
                }
                else if (view.ActivityStatus == VerusDate.Shared.Enum.ActivityStatus.Week)
                {
                    <Tooltip Text="logado essa semana" Multiline="true" Fade="true" Placement="Placement.Left" Style="position: absolute; top: 5px; right: 10px; cursor: help;">
                        <Badge Color="Color.Warning">
                            <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.DotCircle"></Icon>
                        </Badge>
                    </Tooltip>
                }
                else if (view.ActivityStatus == VerusDate.Shared.Enum.ActivityStatus.Month)
                {
                    <Tooltip Text="logado esse mês" Multiline="true" Fade="true" Placement="Placement.Left" Style="position: absolute; top: 5px; right: 10px; cursor: help;">
                        <Badge Color="Color.Danger">
                            <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.DotCircle"></Icon>
                        </Badge>
                    </Tooltip>
                }
                else
                {
                    <Tooltip Text="usuário desativado" Multiline="true" Fade="true" Placement="Placement.Left" Style="position: absolute; top: 5px; right: 10px; cursor: help;">
                        <Badge Color="Color.Dark">
                            <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.DotCircle"></Icon>
                        </Badge>
                    </Tooltip>
                }
                <CardBody>
                    <Badge Color="Color.Secondary">@view.Basic.NickName</Badge>
                    <Paragraph Alignment="TextAlignment.Justified" Margin="Margin.Is0">
                        @view.Basic.Description
                    </Paragraph>
                </CardBody>
                <CardBody>
                    <BtnChat IdUserView="@IdUserView" IdChat="@InteractionVM?.IdChat"></BtnChat>
                    <Button Color="Color.Danger" title="Reportar este perfil" Float="Float.Right" data-toggle="modal" data-target="#modalReport">
                        <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.ExclamationCircle"></Icon> Reportar
                    </Button>
                </CardBody>
            </Card>
        </Column>
        <Column ColumnSize="ColumnSize.Is6.OnDesktop.Is8.OnWidescreen">
            <Card Margin="Margin.Is3.FromBottom">
                <CardHeader>Conquistas</CardHeader>
                <CardBody>
                    <Row>
                        <Column ColumnSize="ColumnSize.Is6.Is3.OnWidescreen.Is2.OnFullHD" Margin="Margin.Is2.FromBottom">
                            <ProfileBadge Type="@badge.Ranking"></ProfileBadge>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is6.Is3.OnWidescreen.Is2.OnFullHD" Margin="Margin.Is2.FromBottom">
                            <ProfileBadge Type="@badge.Seniority"></ProfileBadge>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is6.Is3.OnWidescreen.Is2.OnFullHD" Margin="Margin.Is2.FromBottom">
                            <ProfileBadge Type="@badge.VerifiedProfile"></ProfileBadge>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is6.Is3.OnWidescreen.Is2.OnFullHD" Margin="Margin.Is2.FromBottom">
                            <ProfileBadge Type="@badge.Popular"></ProfileBadge>
                        </Column>
                    </Row>
                </CardBody>
            </Card>
            <Card Margin="Margin.Is3.FromBottom">
                <CardBody>
                    <Divider DividerType="DividerType.TextContent" Text="Básico"></Divider>

                    <ItemDataProfile For="@(() => view.Distance)" StringValue="@ProfileHelper.GetDistanceExtension(view.Distance, ProfileHelper.DistanceType.Km)" ClassIcon="fas fa-map-marker-alt" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Basic.MaritalStatus)" Value="@view.Basic.MaritalStatus" ClassIcon="far fa-heart" Affinities="@affinities"></ItemDataProfile>
                    @*<ItemDataProfile For="@(() => view.Intent)" Value="@view.Intent" ClassIcon="fas fa-search" Affinities="@affinities"></ItemDataProfile>*@
                    <ItemDataProfile For="@(() => view.Basic.BiologicalSex)" Value="@view.Basic.BiologicalSex" ClassIcon="fas fa-neuter" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Basic.GenderIdentity)" Value="@view.Basic.GenderIdentity" ClassIcon="fas fa-neuter" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Basic.SexualOrientation)" Value="@view.Basic.SexualOrientation" ClassIcon="fas fa-neuter" Affinities="@affinities"></ItemDataProfile>

                    <Divider DividerType="DividerType.TextContent" Text="Bio"></Divider>

                    <ItemDataProfile For="@(() => view.Age)" StringValue="@ProfileHelper.GetAgeExtension(view.Age)" ClassIcon="fas fa-birthday-cake" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="null" Value="@view.Bio.BirthDate.GetZodiac()" ClassIcon="fas fa-star-and-crescent" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Bio.RaceCategory)" Value="@view.Bio.RaceCategory" ClassIcon="fas fa-globe" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Bio.Height)" Value="@view.Bio.Height" ClassIcon="fas fa-ruler" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Bio.BodyMass)" Value="@view.Bio.BodyMass" ClassIcon="fas fa-weight" Affinities="@affinities"></ItemDataProfile>

                    <Divider DividerType="DividerType.TextContent" Text="Lifestyle"></Divider>

                    <ItemDataProfile For="@(() => view.Lifestyle.Drink)" Value="@view.Lifestyle.Drink" ClassIcon="fas fa-glass-cheers" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.Smoke)" Value="@view.Lifestyle.Smoke" ClassIcon="fas fa-smoking" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.Diet)" Value="@view.Lifestyle.Diet" ClassIcon="fas fa-utensils" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.HaveChildren)" Value="@view.Lifestyle.HaveChildren" ClassIcon="fas fa-child" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.WantChildren)" Value="@view.Lifestyle.WantChildren" ClassIcon="fas fa-baby" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.EducationLevel)" Value="@view.Lifestyle.EducationLevel" ClassIcon="fas fa-graduation-cap" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.CareerCluster)" Value="@view.Lifestyle.CareerCluster" ClassIcon="fas fa-briefcase" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.Religion)" Value="@view.Lifestyle.Religion" ClassIcon="fas fa-praying-hands" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.MoneyPersonality)" Value="@view.Lifestyle.MoneyPersonality" ClassIcon="fas fa-wallet" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.RelationshipPersonality)" Value="@view.Lifestyle.RelationshipPersonality" ClassIcon="fas fa-people-arrows" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.MyersBriggsTypeIndicator)" Value="@view.Lifestyle.MyersBriggsTypeIndicator" ClassIcon="fas fa-user" Affinities="@affinities"></ItemDataProfile>
                </CardBody>
            </Card>
        </Column>
    </Row>
    <VerusDate.Web.Shared.modal.ProfileReport></VerusDate.Web.Shared.modal.ProfileReport>
}

@code {

    [Parameter]
    public string IdUserView { get; set; }

    private ProfileModel user;
    private VerusDate.Shared.Model.ProfileView view;
    private List<VerusDate.Shared.AffinityVM> affinities = new();
    private ProfileGamificationModel gamification;
    private ProfileBadgeModel badge = new();
    private InteractionModel InteractionVM;

    private string labelPhoto => $"{view.Basic.NickName}, {view.Age}, {ProfileHelper.GetDistanceExtension(view.Distance, ProfileHelper.DistanceType.Km)}";

    private VisibilityOptions Options => new VisibilityOptions()
    {
        Loading = IsLoading,
        //Invalid = IdUserView == ComponenteUtils.IdUser
    };

    protected override async Task LoadData()
    {
        user = await Http.Profile_Get(LocalStorage);
        view = await Http.Profile_GetView(SessionStorage, IdUserView);

        if (view == null)
        {
            Toast.ShowError("Perfil não encontrado. Favor, tentar novamente.");
        }
        else
        {
            affinities = ProfileApi.GetAffinity(user, view);
            gamification = view.Gamification;
            if (view?.Badge != null) badge = view.Badge;
            //InteractionVM = await Http.Interation_Get(IdUserView.ToString());
        }
    }

    private async Task Desike(string IdUserInteraction)
    {
        try
        {
            var result = await Http.Interation_Deslike(IdUserInteraction);
            await result.ProcessResponse(Toast);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private async Task Like(string IdUserInteraction)
    {
        try
        {
            var result = await Http.Interation_Like(IdUserInteraction);
            await result.ProcessResponse(Toast);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private async Task Blink(string IdUserInteraction)
    {
        try
        {
            var result = await Http.Interation_Blink(IdUserInteraction);
            await result.ProcessResponse(Toast);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private string GetClassAffinity(string field)
    {
        if (!affinities.Any(s => s.AttributeName == field)) return "badge badge-secondary";

        if (affinities.Single(s => s.AttributeName == field).HaveAffinity)
        {
            return "badge badge-success";
        }
        else
        {
            return "badge badge-danger";
        }
    }

    public double GetPercentAffinity()
    {
        double totCheck = affinities.Count(w => w.HaveAffinity);
        double totItens = affinities.Count;

        return Math.Round((totCheck / totItens) * 100, 0);
    }
}