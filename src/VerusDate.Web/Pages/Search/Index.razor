@page "/Search"
@attribute [Authorize]
@inherits PageCore<Search.Index>
@inject HttpClient Http

@if (Options.HasCustomVisibility)
{
    <CustomVisibility Options="Options"></CustomVisibility>
}
else
{
    <Row>
        @foreach (var item in listaUsers)
        {
            <Column ColumnSize="ColumnSize.Is2.OnFullHD.Is3.OnWidescreen.Is4.OnDesktop.Is6.OnMobile" Margin="Margin.Is3.FromBottom">
                <Card Margin="Margin.Is3.FromBottom.OnMobile.Is0.OnFullHD">
                    <CardImage Source="@item.GetMainPhoto()" Alt="Photo Image"></CardImage>
                    <Badge Color="Color.Secondary" Style="position: absolute; bottom: 58px; left: 5px;">@item.NickName, @item.BirthDate.GetAge(), @item.Distance Km</Badge>
                    @if (item.ActivityStatus == VerusDate.Shared.Enum.ActivityStatus.Today)
                    {
                        <Badge Color="Color.Success" Style="position: absolute; top: 5px; left: 5px;" title="logado recentemente">
                            <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.DotCircle"></Icon>
                        </Badge>
                    }
                    else if (item.ActivityStatus == VerusDate.Shared.Enum.ActivityStatus.Week)
                    {
                        <Badge Color="Color.Warning" Style="position: absolute; top: 5px; left: 5px;" title="logado essa semana">
                            <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.DotCircle"></Icon>
                        </Badge>
                    }
                    else if (item.ActivityStatus == VerusDate.Shared.Enum.ActivityStatus.Month)
                    {
                        <Badge Color="Color.Danger" Style="position: absolute; top: 5px; left: 5px;" title="logado esse mês">
                            <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.DotCircle"></Icon>
                        </Badge>
                    }
                    else
                    {
                        <Badge Color="Color.Dark" Style="position: absolute; top: 5px; left: 5px;" title="usuário desativado">
                            <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.DotCircle"></Icon>
                        </Badge>
                    }
                    <CardBody Padding="Padding.Is2">
                        <Button Color="Color.Primary" title="Blink" Clicked="() => Blink(item.Id)" Style="position: relative;">
                            <Badge Color="Color.Warning" Style="position: absolute; top: -8px; right: -10px;" title="-1 Diamante">
                                <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Gem"></Icon>
                            </Badge>
                            <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.KissWinkHeart"></Icon>
                        </Button>
                    </CardBody>
                </Card>
            </Column>
        }
    </Row>
}

@code
{
    private ProfileModel profile;
    private ProfileGamificationModel gamification;
    private List<ProfileSearch> listaUsers;
    private List<InteractionModel> interactions;

    private VisibilityOptions Options => new VisibilityOptions()
    {
        Loading = listaUsers == null,// || interactions == null,
        NoData = listaUsers != null && !listaUsers.Any()
    };

    protected override async Task LoadData()
    {
        profile = await Http.Profile_Get();
        gamification = await Http.Gamification_Get();
        listaUsers = await Http.Profile_ListSearch();
        //interactions = await Http.Interation_GetList();
    }

    private InteractionModel getCurrentInteraction(string IdUserInteraction)
    {
        return interactions.SingleOrDefault(s => s.IdUserInteraction == IdUserInteraction);
    }

    private async Task Blink(string IdUserInteraction)
    {
        try
        {
            var result = await Http.Interation_Blink(IdUserInteraction);

            await result.ProcessResponse(Toast, msgInfo: "-1 Diamante");

            RefreshCore.RefreshHead();
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }
}