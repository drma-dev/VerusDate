@page "/ProfileView/{IdUserView}"
@attribute [Authorize]
@inherits PageCore<ProfileView>
@inject HttpClient Http

@if (Options.HasCustomVisibility)
{
    <CustomVisibility Options="Options"></CustomVisibility>
}
else
{
    <div class="row">
        <div class="col-sm-3">
            <div class="contact-box" style="padding: 0px;">
                <div class="embed-responsive embed-responsive-1by1 divPhoto" style="background-color: black;">
                    <img alt="..." class="imgPhoto" src="@view.Photo.GetMainPhoto()" />
                    <span style="position: absolute; left: 10px; top: 10px;">
                        <i class="badge badge-secondary">@view.Basic.NickName, @view.Bio.BirthDate.GetAge(), @view.GetDistance(0, 0)</i>
                    </span>
                    <div class="text-center" style="position: absolute; bottom: 10px; width: 100%;">
                        <BtnChat IdUserView="@IdUserView" IdChat="@InteractionVM?.IdChat"></BtnChat>
                    </div>
                </div>
                <div style="padding: 10px;">
                    <h5>Sobre mim</h5>
                    <p>@view.Basic.Description</p>
                </div>
            </div>
        </div>
        <div class="col-md-9">
            <div class="ibox">
                <div class="ibox-content">
                    <ProfileBadge Type="@badge?.Rank"></ProfileBadge>
                    <ProfileBadge Type="@badge?.Seniority"></ProfileBadge>
                    <ProfileBadge Type="@badge?.CompletedProfile"></ProfileBadge>
                    <ProfileBadge Type="@badge?.VerifiedProfile"></ProfileBadge>
                    <ProfileBadge Type="@badge?.Popular"></ProfileBadge>
                </div>
            </div>
            <div class="ibox">
                <div class="ibox-content">
                    <h4>Básico</h4>

                    <ItemDataProfile For="@(() => view.Basic.BiologicalSex)" Value="@view.Basic.BiologicalSex" ClassIcon="fas fa-neuter" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Basic.MaritalStatus)" Value="@view.Basic.MaritalStatus" ClassIcon="far fa-heart" Affinities="@affinities"></ItemDataProfile>
                    @*<ItemDataProfile For="@(() => view.Intent)" Value="@view.Intent" ClassIcon="fas fa-search" Affinities="@affinities"></ItemDataProfile>*@
                    <ItemDataProfile For="@(() => view.Basic.GenderIdentity)" Value="@view.Basic.GenderIdentity" ClassIcon="fas fa-neuter" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Basic.SexualOrientation)" Value="@view.Basic.SexualOrientation" ClassIcon="fas fa-neuter" Affinities="@affinities"></ItemDataProfile>

                    <h4>Bio</h4>

                    <ItemDataProfile For="null" Value="@view.Bio.BirthDate.GetZodiac()" ClassIcon="fas fa-star-and-crescent" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Bio.Height)" Value="@view.Bio.Height" ClassIcon="fas fa-ruler" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Bio.BodyMass)" Value="@view.Bio.BodyMass" ClassIcon="fas fa-weight" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Bio.RaceCategory)" Value="@view.Bio.RaceCategory" ClassIcon="fas fa-globe" Affinities="@affinities"></ItemDataProfile>

                    <h4>Lifestyle</h4>

                    <ItemDataProfile For="@(() => view.Lifestyle.HaveChildren)" Value="@view.Lifestyle.HaveChildren" ClassIcon="fas fa-child" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.WantChildren)" Value="@view.Lifestyle.WantChildren" ClassIcon="fas fa-baby" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.Drink)" Value="@view.Lifestyle.Drink" ClassIcon="fas fa-glass-cheers" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.Smoke)" Value="@view.Lifestyle.Smoke" ClassIcon="fas fa-smoking" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.EducationLevel)" Value="@view.Lifestyle.EducationLevel" ClassIcon="fas fa-graduation-cap" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.CareerCluster)" Value="@view.Lifestyle.CareerCluster" ClassIcon="fas fa-briefcase" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.Religion)" Value="@view.Lifestyle.Religion" ClassIcon="fas fa-praying-hands" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.MoneyPersonality)" Value="@view.Lifestyle.MoneyPersonality" ClassIcon="fas fa-wallet" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.RelationshipPersonality)" Value="@view.Lifestyle.RelationshipPersonality" ClassIcon="fas fa-people-arrows" Affinities="@affinities"></ItemDataProfile>
                    <ItemDataProfile For="@(() => view.Lifestyle.MyersBriggsTypeIndicator)" Value="@view.Lifestyle.MyersBriggsTypeIndicator" ClassIcon="fas fa-user" Affinities="@affinities"></ItemDataProfile>
                </div>
            </div>
        </div>
    </div>
    <VerusDate.Web.Shared.modal.ProfileReport></VerusDate.Web.Shared.modal.ProfileReport>
}

@code {

    [Parameter]
    public string IdUserView { get; set; }

    private VerusDate.Shared.Model.Profile.Profile view;
    private List<VerusDate.Shared.AffinityVM> affinities;
    private VerusDate.Shared.Model.Profile.ProfileGamification gamification;
    private VerusDate.Shared.Model.Profile.ProfileBadge badge;
    private VerusDate.Shared.Model.Interaction.Interaction InteractionVM;

    private VisibilityOptions Options => new VisibilityOptions()
    {
        Loading = view == null || affinities == null || gamification == null,
        Invalid = IdUserView == ComponenteUtils.IdUser
    };

    protected override async Task LoadData()
    {
        //view = await Http.Profile_GetView(IdUserView);
        view = ProfileSeed.GetProfile(null, true, true, true, true, true);

        if (view == null)
        {
            Toast.ShowError("Profile not found. Please, try again later.");
        }
        else
        {
            var looking = view.Looking;
            //affinities = ProfileApi.GetAffinity(looking, view);
            gamification = view.Gamification;
            badge = view.Badge;
            //InteractionVM = await Http.Interation_Get(IdUserView.ToString());
        }
    }

    private async Task Desike(string IdUserInteraction)
    {
        try
        {
            var result = await Http.Interation_Deslike(IdUserInteraction);
            await result.ProcessResponse(Toast);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private async Task Like(string IdUserInteraction)
    {
        try
        {
            var result = await Http.Interation_Like(LocalStorage, IdUserInteraction);
            await result.ProcessResponse(Toast);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private async Task Blink(string IdUserInteraction)
    {
        try
        {
            var result = await Http.Interation_Blink(LocalStorage, IdUserInteraction);
            await result.ProcessResponse(Toast);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private string GetClassAffinity(string field)
    {
        if (!affinities.Any(s => s.AttributeName == field)) return "badge badge-secondary";

        if (affinities.Single(s => s.AttributeName == field).HaveAffinity)
        {
            return "badge badge-success";
        }
        else
        {
            return "badge badge-danger";
        }
    }

    public double GetPercentAffinity()
    {
        double totCheck = affinities.Count(w => w.HaveAffinity);
        double totItens = affinities.Count;

        return Math.Round((totCheck / totItens) * 100, 0);
    }
}