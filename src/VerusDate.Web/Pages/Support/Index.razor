@page "/Support"
@attribute [Authorize]
@inherits PageCore<Support.Index>
@inject HttpClient Http
@*@inject IModalService Modal*@

<Alert Color="Color.Secondary" Visible="true">
    <AlertDescription>
        <Link To="Terms/pt">Termos de Uso</Link> ▪ <Link To="Privacy/pt">Políticas de Privacidade</Link> ▪ <Link To="Faq">Dúvidas / Perguntas</Link>
    </AlertDescription>
</Alert>

<Alert Color="Color.Warning" Visible="true">
    <AlertDescription>
        Olá, como ainda estamos em uma versão beta, é provável que alguns erros ocorram ou que alguns recursos precisem de melhorias.
    </AlertDescription>
    <CloseButton></CloseButton>
</Alert>

<Row>
    <Column ColumnSize="ColumnSize.Is6">
        <Card>
            <CardHeader>
                <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Bug"></Icon> Erros
                <Button Size="Size.ExtraSmall" Color="Color.Primary" Float="Float.Right" Clicked="() => NewTicket.ShowModal(TicketType.Bug)">
                    <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.PlusCircle"></Icon> Novo
                </Button>
            </CardHeader>
            <CardBody>
                <Row>
                    <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                        <Field Horizontal="true">
                            <FieldLabel ColumnSize="ColumnSize.IsFull.OnWidescreen.Is4.OnFullHD">
                                Status
                            </FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.IsFull.OnWidescreen.Is8.OnFullHD">
                                <Select TValue="TicketStatus?" @bind-SelectedValue="@TicketStatusBug">
                                    @foreach (var item in EnumHelper.GetArray<TicketStatus>())
                                    {
                                        <SelectItem Value="@item">@item.GetName()</SelectItem>
                                    }
                                </Select>
                            </FieldBody>
                        </Field>
                    </Column>
                </Row>
                @if (OptionsBug.HasCustomVisibility)
                {
                    <CustomVisibility Options="@OptionsBug"></CustomVisibility>
                }
                else
                {
                    <Row Style="max-height: 330px; overflow: auto;">
                        @foreach (var item in GetTicketList(TicketType.Bug))
                        {
                            <Column ColumnSize="ColumnSize.Is6" Margin="Margin.Is1.FromBottom">
                                <Card Style="background-color: #e2e3e5">
                                    <CardBody Padding="Padding.Is1">
                                        <Paragraph Margin="Margin.Is0.FromBottom" Alignment="TextAlignment.Justified">
                                            <MemoEdit Rows="2" Plaintext="true" Text="@item.Description.GetResume(50)" />
                                        </Paragraph>
                                        <Paragraph Margin="Margin.Is2.FromBottom">
                                            <Badge Color="Color.Secondary"><Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Clock"></Icon> @item.DtInsert.Value.GetElapsedTime()</Badge>
                                            <br />
                                            <Badge Color="Color.Secondary" Margin="Margin.Is1.FromRight"><Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.VoteYea"></Icon> @item.TotalVotes</Badge>
                                            @if (item.TicketStatus == TicketStatus.Published)
                                            {
                                                <Badge Color="Color.Success"><Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.InfoCircle"></Icon> @item.TicketStatus.GetName()</Badge>
                                            }
                                            else if (item.TicketStatus == TicketStatus.Progress)
                                            {
                                                <Badge Color="Color.Warning">@item.TicketStatus.GetName()</Badge>
                                            }
                                            else if (item.TicketStatus == TicketStatus.Done)
                                            {
                                                <Badge Color="Color.Primary">@item.TicketStatus.GetName()</Badge>
                                            }
                                            else
                                            {
                                                <Badge Color="Color.Danger">@item.TicketStatus.GetName()</Badge>
                                            }
                                            <Button Float="Float.Right" Size="Size.ExtraSmall" Color="Color.Primary" Clicked="()=>Vote(item.Id)" Disabled="@anyVote(item.Id)">
                                                <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Check"></Icon> Votar
                                            </Button>
                                        </Paragraph>
                                    </CardBody>
                                </Card>
                            </Column>
                        }
                    </Row>
                }
            </CardBody>
        </Card>
    </Column>
    <Column ColumnSize="ColumnSize.Is6">
        <Card>
            <CardHeader>
                <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Smile"></Icon> Sugestões de Melhorias
                <Button Size="Size.ExtraSmall" Color="Color.Primary" Float="Float.Right" Clicked="() => NewTicket.ShowModal(TicketType.FeatureRequest)">
                    <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.PlusCircle"></Icon> Novo
                </Button>
            </CardHeader>
            <CardBody>
                <Row>
                    <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                        <Field Horizontal="true">
                            <FieldLabel ColumnSize="ColumnSize.IsFull.OnWidescreen.Is4.OnFullHD">
                                Status
                            </FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.IsFull.OnWidescreen.Is8.OnFullHD">
                                <Select TValue="TicketStatus?" @bind-SelectedValue="@TicketStatusFeature">
                                    @foreach (var item in EnumHelper.GetArray<TicketStatus>())
                                    {
                                        <SelectItem Value="@item">@item.GetName()</SelectItem>
                                    }
                                </Select>
                            </FieldBody>
                        </Field>
                    </Column>
                </Row>
                @if (OptionsFeature.HasCustomVisibility)
                {
                    <CustomVisibility Options="@OptionsFeature"></CustomVisibility>
                }
                else
                {
                    <Row Style="max-height: 330px; overflow: auto;">
                        @foreach (var item in GetTicketList(TicketType.FeatureRequest))
                        {
                            <Column ColumnSize="ColumnSize.Is6" Margin="Margin.Is1.FromBottom">
                                <Card Style="background-color: #e2e3e5">
                                    <CardBody Padding="Padding.Is1">
                                        <Paragraph Margin="Margin.Is0.FromBottom" Alignment="TextAlignment.Justified">
                                            <MemoEdit Rows="2" Plaintext="true" Text="@item.Description.GetResume(60)" />
                                        </Paragraph>
                                        <Paragraph Margin="Margin.Is2.FromBottom">
                                            <Badge Color="Color.Secondary"><Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Clock"></Icon> @item.DtInsert.Value.GetElapsedTime()</Badge>
                                            <br />
                                            <Badge Color="Color.Secondary" Margin="Margin.Is1.FromRight"><Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.VoteYea"></Icon> @item.TotalVotes</Badge>
                                            @if (item.TicketStatus == TicketStatus.Published)
                                            {
                                                <Badge Color="Color.Success"><Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.InfoCircle"></Icon> @item.TicketStatus.GetName()</Badge>
                                            }
                                            else if (item.TicketStatus == TicketStatus.Progress)
                                            {
                                                <Badge Color="Color.Warning">@item.TicketStatus.GetName()</Badge>
                                            }
                                            else if (item.TicketStatus == TicketStatus.Done)
                                            {
                                                <Badge Color="Color.Primary">@item.TicketStatus.GetName()</Badge>
                                            }
                                            else //Declined
                                            {
                                                <Badge Color="Color.Danger">@item.TicketStatus.GetName()</Badge>
                                            }
                                            <Button Float="Float.Right" Size="Size.ExtraSmall" Color="Color.Primary" Clicked="()=>Vote(item.Id)" Disabled="@anyVote(item.Id)">
                                                <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Check"></Icon> Votar
                                            </Button>
                                        </Paragraph>
                                    </CardBody>
                                </Card>
                            </Column>
                        }
                    </Row>
                }
            </CardBody>
        </Card>
    </Column>
</Row>

<VerusDate.Web.Shared.modal.NewTicket @ref="NewTicket"></VerusDate.Web.Shared.modal.NewTicket>

@code {
    private List<VerusDate.Shared.Model.Support.Ticket> tickets = new();
    private List<VerusDate.Shared.Model.Support.TicketVote> myVotes = new();

    public TicketStatus? TicketStatusBug { get; set; }
    public TicketStatus? TicketStatusFeature { get; set; }

    private Shared.modal.NewTicket NewTicket;

    private VisibilityOptions OptionsBug => new VisibilityOptions()
    {
        Loading = tickets == null,
        NoData = (tickets != null && !GetTicketList(TicketType.Bug).Any())
    };

    private VisibilityOptions OptionsFeature => new VisibilityOptions()
    {
        Loading = tickets == null,
        NoData = (tickets != null && !GetTicketList(TicketType.FeatureRequest).Any())
    };

    protected override async Task LoadData()
    {
        tickets = await Http.Ticket_GetList();
        myVotes = await Http.Ticket_GetMyVotes();
    }

    private List<VerusDate.Shared.Model.Support.Ticket> GetTicketList(TicketType ticketType)
    {
        if (ticketType == TicketType.Bug && TicketStatusBug.HasValue)
            return tickets.Where(w => w.TicketType == ticketType & w.TicketStatus == TicketStatusBug).OrderByDescending(o => o.DtInsert).ToList();
        else if (ticketType == TicketType.FeatureRequest && TicketStatusFeature.HasValue)
            return tickets.Where(w => w.TicketType == ticketType & w.TicketStatus == TicketStatusFeature).OrderByDescending(o => o.DtInsert).ToList();
        else
            return tickets.Where(w => w.TicketType == ticketType).OrderByDescending(o => o.DtInsert).ToList();
    }

    //async Task ShowModal(TicketType ticketType)
    //{
    //    NewTicket.ShowModal(ticketType);
    //    //var parameters = new ModalParameters();
    //    //parameters.Add(nameof(TicketType), ticketType);

    //    //var messageForm = Modal.Show<NewTicket>("Novo Ticket", parameters);
    //    //var result = await messageForm.Result;

    //    //if (!result.Cancelled)
    //    //{
    //    //    await Http.Ticket_Insert((VerusDate.Shared.Model.Support.Ticket)result.Data);
    //    //    tickets.Add((VerusDate.Shared.Model.Support.Ticket)result.Data);
    //    //}
    //}

    private async Task Vote(string IdTicket)
    {
        if (anyVote(IdTicket))
        {
            Toast.ShowError("Você já votou neste ticket");
        }
        else
        {
            var vote = new VerusDate.Shared.Model.Support.TicketVote();
            vote.SetKey(IdTicket);

            await Http.Ticket_Vote(vote);
            tickets.Single(s => s.Id == IdTicket).Vote();

            myVotes.Add(vote);
            Toast.ShowSuccess("Voto registrado com sucesso");
        }
    }

    private bool anyVote(string IdTicket)
    {
        return myVotes.Any(a => a.Key == IdTicket & a.IdVotedUser == ComponenteUtils.IdUser);
    }
}