// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VerusDate.Server.Data;

namespace VerusDate.Server.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("VerusDate.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("VerusDate.Shared.Entity.Badge", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Badge");
                });

            modelBuilder.Entity("VerusDate.Shared.Entity.Chat", b =>
                {
                    b.Property<string>("IdChat")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTimeOffset>("DtMessage")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Content")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("IdUserSender")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSync")
                        .HasColumnType("bit");

                    b.Property<int>("TypeContent")
                        .HasColumnType("int");

                    b.HasKey("IdChat", "DtMessage");

                    b.ToTable("Chat");
                });

            modelBuilder.Entity("VerusDate.Shared.Entity.Gamification", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<int>("Diamond")
                        .HasColumnType("int");

                    b.Property<int>("Food")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("XP")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Gamification");
                });

            modelBuilder.Entity("VerusDate.Shared.Entity.Interaction", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("IdUserInteraction")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTimeOffset>("DtInsert")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<string>("IdChat")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id", "IdUserInteraction");

                    b.ToTable("Interaction");
                });

            modelBuilder.Entity("VerusDate.Shared.Entity.Profile", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<int>("BiologicalSex")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BodyMass")
                        .HasColumnType("int");

                    b.Property<int?>("CareerCluster")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)");

                    b.Property<int>("Diet")
                        .HasColumnType("int");

                    b.Property<int>("Drink")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DtInsert")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<DateTimeOffset>("DtLastLogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<DateTimeOffset>("DtTopList")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<DateTimeOffset?>("DtUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("EducationLevel")
                        .HasColumnType("int");

                    b.Property<int>("GenderIdentity")
                        .HasColumnType("int");

                    b.Property<int?>("HaveChildren")
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Hobbies")
                        .HasMaxLength(1024)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("Intent")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<string>("Location")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("MainPhoto")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("MainPhotoValidation")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)");

                    b.Property<int>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<int?>("MoneyPersonality")
                        .HasColumnType("int");

                    b.Property<int?>("MyersBriggsTypeIndicator")
                        .HasColumnType("int");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PhotoGallery")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)");

                    b.Property<int>("RaceCategory")
                        .HasColumnType("int");

                    b.Property<int?>("RelationshipPersonality")
                        .HasColumnType("int");

                    b.Property<int?>("Religion")
                        .HasColumnType("int");

                    b.Property<int>("SexualOrientation")
                        .HasColumnType("int");

                    b.Property<int>("Smoke")
                        .HasColumnType("int");

                    b.Property<int?>("WantChildren")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Profile");
                });

            modelBuilder.Entity("VerusDate.Shared.Entity.ProfileLooking", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<int?>("BiologicalSex")
                        .HasColumnType("int");

                    b.Property<int?>("BodyMass")
                        .HasColumnType("int");

                    b.Property<int?>("CareerCluster")
                        .HasColumnType("int");

                    b.Property<int?>("Diet")
                        .HasColumnType("int");

                    b.Property<double>("Distance")
                        .HasColumnType("float");

                    b.Property<int?>("Drink")
                        .HasColumnType("int");

                    b.Property<int?>("EducationLevel")
                        .HasColumnType("int");

                    b.Property<int?>("GenderIdentity")
                        .HasColumnType("int");

                    b.Property<int?>("HaveChildren")
                        .HasColumnType("int");

                    b.Property<string>("Intent")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<int?>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<int>("MaxAge")
                        .HasColumnType("int");

                    b.Property<int?>("MaxHeight")
                        .HasColumnType("int");

                    b.Property<int>("MinimalAge")
                        .HasColumnType("int");

                    b.Property<int?>("MinimalHeight")
                        .HasColumnType("int");

                    b.Property<int?>("RaceCategory")
                        .HasColumnType("int");

                    b.Property<int?>("Religion")
                        .HasColumnType("int");

                    b.Property<int?>("SexualOrientation")
                        .HasColumnType("int");

                    b.Property<int?>("Smoke")
                        .HasColumnType("int");

                    b.Property<int?>("WantChildren")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProfileLooking");
                });

            modelBuilder.Entity("VerusDate.Shared.Entity.Ticket", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)");

                    b.Property<DateTimeOffset>("DtTicket")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<string>("IdUserOwner")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<int>("TicketStatus")
                        .HasColumnType("int");

                    b.Property<int>("TicketType")
                        .HasColumnType("int");

                    b.Property<int>("TotalVotes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("VerusDate.Shared.Entity.TicketVote", b =>
                {
                    b.Property<string>("IdTicket")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("IdUser")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTimeOffset>("DtVote")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.HasKey("IdTicket", "IdUser");

                    b.ToTable("TicketVote");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("VerusDate.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("VerusDate.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VerusDate.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("VerusDate.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VerusDate.Shared.Entity.Badge", b =>
                {
                    b.OwnsOne("VerusDate.Shared.ValueType.BadgeType", "CompletedProfile", b1 =>
                        {
                            b1.Property<string>("BadgeId")
                                .HasMaxLength(256)
                                .IsUnicode(false)
                                .HasColumnType("varchar(256)");

                            b1.Property<int>("Level")
                                .HasColumnType("int");

                            b1.HasKey("BadgeId");

                            b1.ToTable("Badge");

                            b1.WithOwner()
                                .HasForeignKey("BadgeId");
                        });

                    b.OwnsOne("VerusDate.Shared.ValueType.BadgeType", "Popular", b1 =>
                        {
                            b1.Property<string>("BadgeId")
                                .HasMaxLength(256)
                                .IsUnicode(false)
                                .HasColumnType("varchar(256)");

                            b1.Property<int>("Level")
                                .HasColumnType("int");

                            b1.HasKey("BadgeId");

                            b1.ToTable("Badge");

                            b1.WithOwner()
                                .HasForeignKey("BadgeId");
                        });

                    b.OwnsOne("VerusDate.Shared.ValueType.BadgeType", "Rank", b1 =>
                        {
                            b1.Property<string>("BadgeId")
                                .HasMaxLength(256)
                                .IsUnicode(false)
                                .HasColumnType("varchar(256)");

                            b1.Property<int>("Level")
                                .HasColumnType("int");

                            b1.HasKey("BadgeId");

                            b1.ToTable("Badge");

                            b1.WithOwner()
                                .HasForeignKey("BadgeId");
                        });

                    b.OwnsOne("VerusDate.Shared.ValueType.BadgeType", "Seniority", b1 =>
                        {
                            b1.Property<string>("BadgeId")
                                .HasMaxLength(256)
                                .IsUnicode(false)
                                .HasColumnType("varchar(256)");

                            b1.Property<int>("Level")
                                .HasColumnType("int");

                            b1.HasKey("BadgeId");

                            b1.ToTable("Badge");

                            b1.WithOwner()
                                .HasForeignKey("BadgeId");
                        });

                    b.OwnsOne("VerusDate.Shared.ValueType.BadgeType", "VerifiedProfile", b1 =>
                        {
                            b1.Property<string>("BadgeId")
                                .HasMaxLength(256)
                                .IsUnicode(false)
                                .HasColumnType("varchar(256)");

                            b1.Property<int>("Level")
                                .HasColumnType("int");

                            b1.HasKey("BadgeId");

                            b1.ToTable("Badge");

                            b1.WithOwner()
                                .HasForeignKey("BadgeId");
                        });

                    b.Navigation("CompletedProfile");

                    b.Navigation("Popular");

                    b.Navigation("Rank");

                    b.Navigation("Seniority");

                    b.Navigation("VerifiedProfile");
                });

            modelBuilder.Entity("VerusDate.Shared.Entity.Interaction", b =>
                {
                    b.OwnsOne("VerusDate.Shared.ValueType.Action", "Blink", b1 =>
                        {
                            b1.Property<string>("InteractionId")
                                .HasMaxLength(256)
                                .IsUnicode(false)
                                .HasColumnType("varchar(256)");

                            b1.Property<string>("InteractionIdUserInteraction")
                                .HasMaxLength(256)
                                .IsUnicode(false)
                                .HasColumnType("varchar(256)");

                            b1.Property<DateTimeOffset>("Date")
                                .HasColumnType("datetimeoffset");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit");

                            b1.HasKey("InteractionId", "InteractionIdUserInteraction");

                            b1.ToTable("Interaction");

                            b1.WithOwner()
                                .HasForeignKey("InteractionId", "InteractionIdUserInteraction");
                        });

                    b.OwnsOne("VerusDate.Shared.ValueType.Action", "Block", b1 =>
                        {
                            b1.Property<string>("InteractionId")
                                .HasMaxLength(256)
                                .IsUnicode(false)
                                .HasColumnType("varchar(256)");

                            b1.Property<string>("InteractionIdUserInteraction")
                                .HasMaxLength(256)
                                .IsUnicode(false)
                                .HasColumnType("varchar(256)");

                            b1.Property<DateTimeOffset>("Date")
                                .HasColumnType("datetimeoffset");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit");

                            b1.HasKey("InteractionId", "InteractionIdUserInteraction");

                            b1.ToTable("Interaction");

                            b1.WithOwner()
                                .HasForeignKey("InteractionId", "InteractionIdUserInteraction");
                        });

                    b.OwnsOne("VerusDate.Shared.ValueType.Action", "Deslike", b1 =>
                        {
                            b1.Property<string>("InteractionId")
                                .HasMaxLength(256)
                                .IsUnicode(false)
                                .HasColumnType("varchar(256)");

                            b1.Property<string>("InteractionIdUserInteraction")
                                .HasMaxLength(256)
                                .IsUnicode(false)
                                .HasColumnType("varchar(256)");

                            b1.Property<DateTimeOffset>("Date")
                                .HasColumnType("datetimeoffset");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit");

                            b1.HasKey("InteractionId", "InteractionIdUserInteraction");

                            b1.ToTable("Interaction");

                            b1.WithOwner()
                                .HasForeignKey("InteractionId", "InteractionIdUserInteraction");
                        });

                    b.OwnsOne("VerusDate.Shared.ValueType.Action", "Like", b1 =>
                        {
                            b1.Property<string>("InteractionId")
                                .HasMaxLength(256)
                                .IsUnicode(false)
                                .HasColumnType("varchar(256)");

                            b1.Property<string>("InteractionIdUserInteraction")
                                .HasMaxLength(256)
                                .IsUnicode(false)
                                .HasColumnType("varchar(256)");

                            b1.Property<DateTimeOffset>("Date")
                                .HasColumnType("datetimeoffset");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit");

                            b1.HasKey("InteractionId", "InteractionIdUserInteraction");

                            b1.ToTable("Interaction");

                            b1.WithOwner()
                                .HasForeignKey("InteractionId", "InteractionIdUserInteraction");
                        });

                    b.OwnsOne("VerusDate.Shared.ValueType.Action", "Match", b1 =>
                        {
                            b1.Property<string>("InteractionId")
                                .HasMaxLength(256)
                                .IsUnicode(false)
                                .HasColumnType("varchar(256)");

                            b1.Property<string>("InteractionIdUserInteraction")
                                .HasMaxLength(256)
                                .IsUnicode(false)
                                .HasColumnType("varchar(256)");

                            b1.Property<DateTimeOffset>("Date")
                                .HasColumnType("datetimeoffset");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit");

                            b1.HasKey("InteractionId", "InteractionIdUserInteraction");

                            b1.ToTable("Interaction");

                            b1.WithOwner()
                                .HasForeignKey("InteractionId", "InteractionIdUserInteraction");
                        });

                    b.Navigation("Blink");

                    b.Navigation("Block");

                    b.Navigation("Deslike");

                    b.Navigation("Like");

                    b.Navigation("Match");
                });
#pragma warning restore 612, 618
        }
    }
}
